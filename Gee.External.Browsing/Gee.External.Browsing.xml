<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gee.External.Browsing</name>
    </assembly>
    <members>
        <member name="T:Gee.External.Browsing.BrowsingException">
            <summary>
                Browsing Exception.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.BrowsingException.#ctor(System.String)">
            <summary>
                Create a Browsing Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.BrowsingException.#ctor(System.String,System.Exception)">
            <summary>
                Create a Browsing Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
            <param name="innerException">
                An exception that is the cause of the exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Browsing.Cache.BrowsingCacheException">
            <summary>
                Cache Exception.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheException.#ctor(System.String)">
            <summary>
                Create a Cache Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheException.#ctor(System.String,System.Exception)">
            <summary>
                Create a Cache Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
            <param name="innerException">
                An exception that is the cause of the exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Browsing.Cache.BrowsingCacheExtension">
            <summary>
                Cache Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.GetSafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String)">
            <summary>
                Get a Safe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256HashPrefix" />. A null reference indicates a safe cache entry is not
                cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.GetUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String)">
            <summary>
                Get an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256Hash" />. A null reference indicates an unsafe cache entry is not cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.LookupAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.String)">
            <summary>
                Lookup a Threat Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to lookup in the
                cache.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to lookup in
                the cache.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Cache.CacheLookupResult" /> indicating the nature of the operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatSha256Hash" /> is
                a null reference, or if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.LookupAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Lookup a Threat Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to lookup in the
                cache.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to lookup in
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Cache.CacheLookupResult" /> indicating the nature of the operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatSha256Hash" /> is
                a null reference, or if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,Gee.External.Browsing.Cache.SafeCacheEntry)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="safeCacheEntry">
                A <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> to cache.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="safeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.DateTime)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to cache.
            </param>
            <param name="expirationDate">
                The date, in Coordinated Universal Time (UTC), the safe cache entry expires and the threat identified
                by <paramref name="threatSha256HashPrefix" /> should be considered safe to. If the date is not in UTC,
                it is converted to it.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this"/> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to cache.
            </param>
            <param name="expirationDate">
                The date, in Coordinated Universal Time (UTC), the safe cache entry expires and the threat identified
                by <paramref name="threatSha256HashPrefix" /> should be considered safe to. If the date is not in UTC,
                it is converted to it.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,Gee.External.Browsing.Cache.UnsafeCacheEntry)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="unsafeCacheEntry">
                An <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> to cache.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="unsafeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat})">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to cache.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> to cache.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatSha256Hash" /> is a
                null reference, or if <paramref name="unsafeThreats" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this"/> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat},System.Threading.CancellationToken)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to cache.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatSha256Hash" /> is a
                null reference, or if <paramref name="unsafeThreats" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this"/> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.RemoveSafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String)">
            <summary>
                Remove a Safe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to remove from
                the cache.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheExtension.RemoveUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.IBrowsingCache,System.String)">
            <summary>
                Remove an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to remove from the
                cache.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Cache.BrowsingCacheProxy">
            <summary>
                Cache Proxy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.BrowsingCacheProxy._cache">
            <summary>
                Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.BrowsingCacheProxy._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.BrowsingCacheProxy._ownCache">
            <summary>
                Own Cache Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.Create(Gee.External.Browsing.Cache.IBrowsingCache)">
            <summary>
                Create a Cache Proxy.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The cache proxy takes ownership of
                <paramref name="cache" /> and will dispose it when the cache proxy itself is disposed. If you reference
                or dispose <paramref name="cache" /> after you create the cache proxy, the behavior of the cache proxy
                and <paramref name="cache" /> is undefined.
            </param>
            <returns>
                A cache proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.Create(Gee.External.Browsing.Cache.IBrowsingCache,System.Boolean)">
            <summary>
                Create a Cache Proxy.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to.
            </param>
            <param name="ownCache">
                A boolean flag indicating whether or not the cache proxy takes ownership of <paramref name="cache" />
                and disposes it when the cache proxy itself is disposed. If the cache proxy takes ownership of
                <paramref name="cache" /> and you reference or dispose <paramref name="cache" /> after you create the
                cache proxy, the behavior of the cache proxy and <paramref name="cache" /> is undefined.
            </param>
            <returns>
                A cache proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.#ctor(Gee.External.Browsing.Cache.IBrowsingCache)">
            <summary>
                Create a Cache Proxy.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The cache proxy takes ownership of
                <paramref name="cache" /> and will dispose it when the cache proxy itself is disposed. If you reference
                or dispose <paramref name="cache" /> after you create the cache proxy, the behavior of the cache proxy
                and <paramref name="cache" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.#ctor(Gee.External.Browsing.Cache.IBrowsingCache,System.Boolean)">
            <summary>
                Create a Cache Proxy.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to.
            </param>
            <param name="ownCache">
                A boolean flag indicating whether or not the cache proxy takes ownership of <paramref name="cache" />
                and disposes it when the cache proxy itself is disposed. If the cache proxy takes ownership of
                <paramref name="cache" /> and you reference or dispose <paramref name="cache" /> after you create the
                cache proxy, the behavior of the cache proxy and <paramref name="cache" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.GetSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256HashPrefix" />. A null reference indicates a safe cache entry is not
                cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.GetUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256Hash" />. A null reference indicates an unsafe cache entry is not cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.SafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="safeCacheEntry">
                A <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="safeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.UnsafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="unsafeCacheEntry">
                An <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="unsafeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.RemoveSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to remove from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.RemoveUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to remove from the
                cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.BrowsingCacheProxy.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Cache.CacheLookupResult">
            <summary>
                Cache Lookup Result.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResult._unsafeThreatListDescriptors">
            <summary>
                Unsafe Threat List Descriptors.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResult._unsafeThreats">
            <summary>
                Unsafe Threats.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.IsCacheMiss">
            <summary>
                Determine if Cache Lookup Result Indicates a Cache Miss.
            </summary>
            <remarks>
                Determines if the cache lookup result indicates a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.Miss" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.IsCacheSafeHit">
            <summary>
                Determine if Cache Lookup Result Indicates a Cache Safe Hit.
            </summary>
            <remarks>
                Determines if the cache lookup result indicates a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.SafeHit" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.IsCacheUnsafeHit">
            <summary>
                Determine if Cache Lookup Result Indicates a Cache Unsafe Hit.
            </summary>
            <remarks>
                Determines if the cache lookup result indicates an <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.ResultCode">
            <summary>
                Get Result Code.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Cache.CacheLookupResultCode" /> indicating the nature of the cache lookup result.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.ThreatSha256Hash">
            <summary>
                Get Threat's SHA256 Hash.
            </summary>
            <remarks>
                Represents the full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat
                that was looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.ThreatSha256HashPrefix">
            <summary>
                Get Threat's SHA256 Hash Prefix.
            </summary>
            <remarks>
                Represents the SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat
                that was looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.UnsafeThreatListDescriptors">
            <summary>
                Get Unsafe Threat List Descriptors.
            </summary>
            <remarks>
                Represents the unique collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the unique
                collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the collection of <see cref="P:Gee.External.Browsing.Cache.CacheLookupResult.UnsafeThreats" /> is associated
                with if, and only if, the cache lookup result indicates an
                <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />. To determine if the cache lookup result indicates a
                cache unsafe hit, call <see cref="P:Gee.External.Browsing.Cache.CacheLookupResult.IsCacheUnsafeHit" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the cache lookup result does not indicate a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Cache.CacheLookupResult.UnsafeThreats">
            <summary>
                Get Unsafe Threats
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> that was retrieved from a
                <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> if, and only if, the cache lookup result indicates an
                <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />. To determine if the cache lookup result indicates a
                cache unsafe hit, call <see cref="P:Gee.External.Browsing.Cache.CacheLookupResult.IsCacheUnsafeHit" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the cache lookup result does not indicate a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.CacheMiss(System.String,System.String)">
            <summary>
                Create a Cache Result Indicating a Cache Miss.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <returns>
                A cache lookup result indicating a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.Miss" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256Hash" /> is not formatted as a hexadecimal encoded string, or if
                <paramref name="threatSha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.CacheSafeHit(System.String,System.String)">
            <summary>
                Create a Cache Result Indicating a Cache Safe Hit.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <returns>
                A cache lookup result indicating a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.SafeHit" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256Hash" /> is not formatted as a hexadecimal encoded string, or if
                <paramref name="threatSha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.CacheUnsafeHit(System.String,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat})">
            <summary>
                Create a Cache Result Indicating a Cache Unsafe Hit.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> that was retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <returns>
                A cache lookup result indicating a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference, or if
                <paramref name="unsafeThreats" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256Hash" /> is not formatted as a hexadecimal encoded string, or if
                <paramref name="threatSha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.#ctor(Gee.External.Browsing.Cache.CacheLookupResultCode,System.String,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat})">
            <summary>
                Create a Cache Lookup Result.
            </summary>
            <param name="resultCode">
                A <see cref="T:Gee.External.Browsing.Cache.CacheLookupResultCode" /> indicating the nature of the cache lookup result.
            </param>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> that was retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />
                if, and only if, <paramref name="resultCode" /> is equal to
                <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />. A null reference otherwise.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference, or if <paramref name="resultCode" /> is
                equal to <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" /> and <paramref name="unsafeThreats" /> is a
                null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256Hash" /> is not formatted as a hexadecimal encoded string, or if
                <paramref name="threatSha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.OnUnsafeThreatListDescriptorsInitialization">
            <summary>
                On Unsafe Threat List Descriptors Initialization.
            </summary>
            <returns>
                A unique collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the unique collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> the collection of <see cref="P:Gee.External.Browsing.Cache.CacheLookupResult.UnsafeThreats" /> is associated with.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the cache lookup result does not indicate a <see cref="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit" />.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.CacheLookupResult.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Cache.CacheLookupResultCode">
            <summary>
                Cache Lookup Result Code.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResultCode.Unknown">
            <summary>
                Indicates an error.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResultCode.Miss">
            <summary>
                Indicates a cache miss if a <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> and an <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> do
                not exist in a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache"/>, or if a safe cache entry exists but has expired and an
                unsafe cache entry does not exist, or if a safe cache entry and an unsafe cache entry exist but have
                expired.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResultCode.SafeHit">
            <summary>
                Indicates a cache safe hit if a <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> exists in a
                <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> and has not expired.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.CacheLookupResultCode.UnsafeHit">
            <summary>
                Indicates a cache unsafe hit if an <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> exists in a
                <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> and has not expired.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Cache.IBrowsingCache">
            <summary>
                Abstract Cache.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.GetSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256HashPrefix" />. A null reference indicates a safe cache entry is not
                cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.GetUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256Hash" />. A null reference indicates an unsafe cache entry is not cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.SafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="safeCacheEntry">
                A <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="safeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.UnsafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="unsafeCacheEntry">
                An <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="unsafeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.RemoveSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to remove from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.IBrowsingCache.RemoveUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to remove from the
                cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Cache.MemoryBrowsingCache">
            <summary>
                Memory Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.MemoryBrowsingCache._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.MemoryBrowsingCache._safeCache">
            <summary>
                Safe Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.MemoryBrowsingCache._unsafeCache">
            <summary>
                Unsafe Cache.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.#ctor">
            <summary>
                Create a Memory Cache.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.GetSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256HashPrefix" />. A null reference indicates a safe cache entry is not
                cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.GetUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256Hash" />. A null reference indicates an unsafe cache entry is not cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.SafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="safeCacheEntry">
                A <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="safeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.UnsafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="unsafeCacheEntry">
                An <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="unsafeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.RemoveSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to remove from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.RemoveUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to remove from the
                cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.MemoryBrowsingCache.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Cache.ResilientBrowsingCache">
            <summary>
                Resilient Cache.
            </summary>
            <remarks>
                <para>
                    Represents a resilient cache that automatically retries failed operations performed on a
                    <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />. The number of retry attempts is either caller or implementation specific
                    if you do not specify a value. Between each retry attempt, the resilient cache will pause for an
                    implementation specific interval. If all retry attempts are exhausted and the attempted operation never
                    succeeds, the exception the failed operation threw will be propagated up to you.
                </para>
                <para>
                    If you specify a number of retry attempts when you create a resilient cache, be practical with the
                    value you specify. The resilient cache will pause for an implementation specific interval between each
                    retry attempt, which effectively means if an attempted operation always fails, the exception it threw
                    will not be propagated up to you until all the retry attempts are exhausted. If you specify a very high
                    number of retry attempts, this could have self inflicted performance implications.
                </para>
                <para>
                    When you create a resilient cache, you can specify whether or not it takes ownership of the cache you
                    want to proxy to and dispose it when the resilient cache itself is disposed. The recommended behavior
                    is that you allow the resilient cache to take ownership of the cache you want to proxy to but take note
                    that if you reference or dispose the cache you want to proxy to after you create the resilient cache,
                    the behavior of the resilient cache and cache you want to proxy to is undefined.
                </para>
                <para>
                    Since a resilient cache itself implements <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />, it is technically possible to
                    create a new resilient cache for an existing resilient cache, though the reasons for doing so, in most
                    cases, are unjustified. To avoid doing do, consider creating a resilient cache using
                    <see cref="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Create(Gee.External.Browsing.Cache.IBrowsingCache)" />, or one of its overloads, instead of one of the constructor
                    overloads. <see cref="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Create(Gee.External.Browsing.Cache.IBrowsingCache)" /> will conveniently create a resilient cache if, and
                    only if, the cache you want to proxy to itself is not a resilient cache.
                </para>
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Cache.ResilientBrowsingCache._cache">
            <summary>
                Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.ResilientBrowsingCache._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.ResilientBrowsingCache._ownCache">
            <summary>
                Own Cache Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.ResilientBrowsingCache._resiliencyPolicy">
            <summary>
                Resiliency Policy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Cache.ResilientBrowsingCache._retryAttempts">
            <summary>
                Retry Attempts.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Create(Gee.External.Browsing.Cache.IBrowsingCache)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The resilient cache takes ownership of
                <paramref name="cache" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="cache" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="cache" /> is undefined.
            </param>
            <returns>
                A resilient cache.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Create(Gee.External.Browsing.Cache.IBrowsingCache,System.Int32)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The resilient cache takes ownership of
                <paramref name="cache" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="cache" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="cache" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <returns>
                A resilient cache.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Create(Gee.External.Browsing.Cache.IBrowsingCache,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownCache">
                A boolean flag indicating whether or not the resilient cache takes ownership of
                <paramref name="cache" /> and disposes it when the resilient cache itself is disposed. If the resilient
                cache takes ownership of <paramref name="cache" /> and you reference or dispose
                <paramref name="cache" /> after you create the resilient cache, the behavior of the resilient cache and
                <paramref name="cache" /> is undefined.
            </param>
            <returns>
                A resilient cache.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.#ctor(Gee.External.Browsing.Cache.IBrowsingCache)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The resilient cache takes ownership of
                <paramref name="cache" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="cache" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="cache" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.#ctor(Gee.External.Browsing.Cache.IBrowsingCache,System.Int32)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to. The resilient cache takes ownership of
                <paramref name="cache" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="cache" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="cache" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.#ctor(Gee.External.Browsing.Cache.IBrowsingCache,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Cache.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownCache">
                A boolean flag indicating whether or not the resilient cache takes ownership of
                <paramref name="cache" /> and disposes it when the resilient cache itself is disposed. If the resilient
                cache takes ownership of <paramref name="cache" /> and you reference or dispose
                <paramref name="cache" /> after you create the resilient cache, the behavior of the resilient cache and
                <paramref name="cache" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="cache" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.ExecuteResiliencyPolicyAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Execute a Resiliency Policy Action.
            </summary>
            <param name="resiliencyPolicyAction">
                An action for the resilience policy to execute.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.ExecuteResiliencyPolicyAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Execute a Resiliency Policy Action.
            </summary>
            <typeparam name="T">
                The return type of <paramref name="resiliencyPolicyAction" />.
            </typeparam>
            <param name="resiliencyPolicyAction">
                An action for the resilience policy to execute.
            </param>
            <returns>
                The return value of <paramref name="resiliencyPolicyAction" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.GetSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256HashPrefix" />. A null reference indicates a safe cache entry is not
                cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.GetUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Get an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to retrieve from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> cached for the threat identified by
                <paramref name="threatSha256Hash" />. A null reference indicates an unsafe cache entry is not cached.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.PutSafeCacheEntryAsync(Gee.External.Browsing.Cache.SafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put a Safe Cache Entry Asynchronously.
            </summary>
            <param name="safeCacheEntry">
                A <see cref="T:Gee.External.Browsing.Cache.SafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="safeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.PutUnsafeCacheEntryAsync(Gee.External.Browsing.Cache.UnsafeCacheEntry,System.Threading.CancellationToken)">
            <summary>
                Put an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="unsafeCacheEntry">
                An <see cref="T:Gee.External.Browsing.Cache.UnsafeCacheEntry" /> to cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="unsafeCacheEntry" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.RemoveSafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove a Safe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to remove from
                the cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.RemoveUnsafeCacheEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Remove an Unsafe Cache Entry Asynchronously.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat to remove from the
                cache.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.ResilientBrowsingCache.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Cache.SafeCacheEntry">
            <summary>
                Safe Cache Entry.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Cache.SafeCacheEntry.ExpirationDate">
            <summary>
                Get Safe Cache Entry's Expiration Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the safe cache entry expires and the threat
                identified by <see cref="P:Gee.External.Browsing.Cache.SafeCacheEntry.ThreatSha256HashPrefix" /> should be considered safe to.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.SafeCacheEntry.Expired">
            <summary>
                Determine if Safe Cache Entry Has Expired.
            </summary>
            <remarks>
                Determines if the safe cache entry has expired and the threat identified by
                <see cref="P:Gee.External.Browsing.Cache.SafeCacheEntry.ThreatSha256HashPrefix" /> should no longer be considered safe.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.SafeCacheEntry.ThreatSha256HashPrefix">
            <summary>
                Get Threat's SHA256 Hash Prefix.
            </summary>
            <remarks>
                Represents the SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat
                that was retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Cache.SafeCacheEntry.#ctor(System.String,System.DateTime)">
            <summary>
                Create a Safe Cache Entry.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat that was 
                retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="expirationDate">
                The date, in Coordinated Universal Time (UTC), the safe cache entry expires and the threat identified
                by <paramref name="threatSha256HashPrefix" /> should be considered safe to. If the date is not in UTC,
                it is converted to it.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.SafeCacheEntry.Equals(System.Object)">
            <summary>
                Determine if Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.SafeCacheEntry.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.SafeCacheEntry.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Cache.UnsafeCacheEntry">
            <summary>
                Unsafe Cache Entry.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Cache.UnsafeCacheEntry.Expired">
            <summary>
                Determine if Unsafe Cache Entry Has Expired.
            </summary>
            <remarks>
                Determines if the unsafe cache entry has expired and the threat identified by
                <see cref="P:Gee.External.Browsing.Cache.UnsafeCacheEntry.ThreatSha256Hash" /> should no longer be considered unsafe.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.UnsafeCacheEntry.ThreatSha256Hash">
            <summary>
                Get Threat's SHA256 Hash.
            </summary>
            <remarks>
                Represents the full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat
                that was retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Cache.UnsafeCacheEntry.UnsafeThreats">
            <summary>
                Get Unsafe Threats.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> that was retrieved from a
                <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Cache.UnsafeCacheEntry.#ctor(System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat})">
            <summary>
                Create an Unsafe Cache Entry.
            </summary>
            <param name="threatSha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat that was retrieved
                from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" /> that was retrieved from a <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256Hash" /> is a null reference, or if
                <paramref name="unsafeThreats" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatSha256Hash" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Cache.UnsafeCacheEntry.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.UnsafeCacheEntry.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Cache.UnsafeCacheEntry.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.BrowsingClientException">
            <summary>
                Client Exception.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.BrowsingClientException.HttpStatusCode">
            <summary>
                Get HTTP Status Code.
            </summary>
            <remarks>
                Represents the HTTP status code indicating the nature of the HTTP response for the failed HTTP request
                the exception was thrown for.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
                Create a Client Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
            <param name="httpStatusCode">
                An HTTP status code indicating the nature of the HTTP response for the failed HTTP request the
                exception is being thrown for.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
                Create a Client Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
            <param name="httpStatusCode">
                An HTTP status code indicating the nature of the HTTP response for the failed HTTP request the
                exception is being thrown for.
            </param>
            <param name="innerException">
                An exception that is the cause of the exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Browsing.Clients.BrowsingClientExtension">
            <summary>
                Client Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.FindFullHashesAsync(Gee.External.Browsing.Clients.IBrowsingClient,Gee.External.Browsing.Clients.FullHashRequest)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="request" /> is a null
                reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.FindFullHashesAsync(Gee.External.Browsing.Clients.IBrowsingClient,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList})">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="sha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to query.
            </param>
            <param name="threatLists">
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by <paramref name="sha256HashPrefix" />
                is associated with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="sha256HashPrefix" /> is a
                null reference, or if <paramref name="threatLists" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.FindFullHashesAsync(Gee.External.Browsing.Clients.IBrowsingClient,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList},System.Threading.CancellationToken)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="sha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat to query.
            </param>
            <param name="threatLists">
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by <paramref name="sha256HashPrefix" />
                is associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="sha256HashPrefix" /> is a
                null reference, or if <paramref name="threatLists" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListDescriptorsAsync(Gee.External.Browsing.Clients.IBrowsingClient)">
            <summary>
                Get Threat List Descriptors Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.IBrowsingClient,Gee.External.Browsing.Clients.ThreatListUpdateRequest)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="request" /> is a null
                reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.IBrowsingClient,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList})">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="threatLists">
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatLists" /> is a
                null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.IBrowsingClient,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList},System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="threatLists">
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatLists" /> is a
                null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.IBrowsingClient,Gee.External.Browsing.ThreatList,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when <paramref name="threatList" /> is
                retrieved. A null reference indicates no <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> should be applied.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatList" /> is a
                null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientExtension.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.IBrowsingClient,Gee.External.Browsing.ThreatList,Gee.External.Browsing.Clients.ThreatListUpdateConstraints,System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when <paramref name="threatList" /> is
                retrieved. A null reference indicates no <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> should be applied.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatList" /> is a
                null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.BrowsingClientProxy">
            <summary>
                Client Proxy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.BrowsingClientProxy._client">
            <summary>
                Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.BrowsingClientProxy._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.Create(Gee.External.Browsing.Clients.IBrowsingClient)">
            <summary>
                Create a Client Proxy.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The client proxy takes ownership of
                <paramref name="client" /> and will dispose it when the client proxy itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the client proxy, the behavior of the
                client proxy and <paramref name="client" /> is undefined.
            </param>
            <returns>
                A client proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.#ctor(Gee.External.Browsing.Clients.IBrowsingClient)">
            <summary>
                Create a Client Proxy.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The client proxy takes ownership of
                <paramref name="client" /> and will dispose it when the client proxy itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the client proxy, the behavior of the
                client proxy and <paramref name="client" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.FindFullHashesAsync(Gee.External.Browsing.Clients.FullHashRequest,System.Threading.CancellationToken)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.GetThreatListDescriptorsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat List Descriptors Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.BrowsingClientProxy.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ClientMetadata">
            <summary>
                Client Metadata.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ClientMetadata.Default">
            <summary>
                Default Client Metadata.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ClientMetadata.Id">
            <summary>
                Get Client's Unique Identifier.
            </summary>
            <remarks>
                Represents the unique identifier identifying the client.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ClientMetadata.Version">
            <summary>
                Get Client's Version.
            </summary>
            <remarks>
                Represents the client's version.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.#cctor">
            <summary>
                Create a Client Metadata.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.#ctor(System.String,System.Version)">
            <summary>
                Create a Client Metadata.
            </summary>
            <param name="id">
                A unique identifier identifying the client.
            </param>
            <param name="version">
                The client's version.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown if <paramref name="id" /> consists exclusively of whitespace characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="id" /> is a null reference, or if <paramref name="version" /> is a null
                reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                Create a Client Metadata.
            </summary>
            <param name="id">
                A unique identifier identifying the client.
            </param>
            <param name="majorVersion">
                The client's major version.
            </param>
            <param name="minorVersion">
                The client's minor version.
            </param>
            <param name="patchVersion">
                The client's patch version.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown if <paramref name="id" /> consists exclusively of whitespace characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="id" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="majorVersion" /> is less than <c>0</c>, or if
                <paramref name="minorVersion" /> is less than <c>0</c>, or if <paramref name="patchVersion" /> is less
                than <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if this object is equal to <paramref name="object"/>. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ClientMetadata.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.CompressionType">
            <summary>
                Compression Type.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.CompressionType.Unknown">
            <summary>
                Indicates the compression type of a <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> is unknown. A
                <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> with an unknown compression type should be considered erroneous and
                be disregarded.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.CompressionType.RiceGolomb">
            <summary>
                Indicates a <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> is compressed using the Rice-Golomb algorithm. A
                compressed <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> must be uncompressed before it can be processed.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.CompressionType.Uncompressed">
            <summary>
                Indicates a <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> is uncompressed. An uncompressed
                <see cref="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel" /> can be processed immediately.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.FullHashQuery">
            <summary>
                Full Hash Query.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashQuery.ThreatListDescriptor">
            <summary>
                Get Threat List Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />
                to query.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashQuery.ThreatListState">
            <summary>
                Get and Set Threat List State.
            </summary>
            <remarks>
                Represents the state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" />
                identified by <see cref="P:Gee.External.Browsing.Clients.FullHashQuery.ThreatListDescriptor" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashQuery.#ctor(Gee.External.Browsing.ThreatListDescriptor,System.String)">
            <summary>
                Create a Full Hash Query.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="threatListState" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashQuery.#ctor(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,System.String)">
            <summary>
                Create a Full Hash Query.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatType" />, <paramref name="platformType" />, and
                <paramref name="threatEntryType" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListState" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashQuery.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if this object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashQuery.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashQuery.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.FullHashRequest">
            <summary>
                Full Hash Request.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequest.ClientMetadata">
            <summary>
                Get Client Metadata.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ClientMetadata" /> of the client making the full hash request.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequest.Queries">
            <summary>
                Get Queries.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.Clients.FullHashQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> the threats identified by <see cref="P:Gee.External.Browsing.Clients.FullHashRequest.Sha256HashPrefixes" /> are associated
                with.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequest.Sha256HashPrefixes">
            <summary>
                Get and Set SHA256 Hash Prefixes.
            </summary>
            <remarks>
                Represents the collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings,
                identifying the threats to query.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequest.Build">
            <summary>
                Build a Full Hash Request.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequestBuilder" /> to build a full hash request with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequest.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.FullHashQuery})">
            <summary>
                Create a Full Hash Request.
            </summary>
            <param name="sha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the
                threats to query.
            </param>
            <param name="queries">
                A collection of <see cref="T:Gee.External.Browsing.Clients.FullHashQuery" /> indicating the collection of <see cref="T:Gee.External.Browsing.ThreatList" />
                the threats identified by <paramref name="sha256HashPrefixes" /> are associated with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="queries" /> is a null reference, or if <paramref name="sha256HashPrefixes" />
                is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="sha256HashPrefixes" /> contains a SHA256 hash prefix that is not hexadecimal
                encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequest.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.FullHashQuery},Gee.External.Browsing.Clients.ClientMetadata)">
            <summary>
                Create a Full Hash Request.
            </summary>
            <param name="sha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the
                threats to query.
            </param>
            <param name="queries">
                A collection of <see cref="T:Gee.External.Browsing.Clients.FullHashQuery" /> indicating the collection of <see cref="T:Gee.External.Browsing.ThreatList" />
                the threats identified by <paramref name="sha256HashPrefixes" /> are associated with.
            </param>
            <param name="clientMetadata">
                The <see cref="T:Gee.External.Browsing.Clients.ClientMetadata" /> of the client making the full hash request. A null reference
                indicates the metadata of the client is unknown.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="queries" /> is a null reference, or if <paramref name="sha256HashPrefixes" />
                is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="sha256HashPrefixes" /> contains a SHA256 hash prefix that is not hexadecimal
                encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequest.#ctor(Gee.External.Browsing.Clients.FullHashRequestBuilder)">
            <summary>
                Create a Full Hash Request.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequestBuilder" /> to initialize the full hash request with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.FullHashRequestBuilder">
            <summary>
                Full Hash Request Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequestBuilder.ClientMetadata">
            <summary>
                Get and Set Client Metadata.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ClientMetadata" /> of the client making the full hash request.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequestBuilder.Queries">
            <summary>
                Get and Set Queries.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.Clients.FullHashQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> the threats identified by <see cref="P:Gee.External.Browsing.Clients.FullHashRequestBuilder.Sha256HashPrefixes" /> are associated
                with.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashRequestBuilder.Sha256HashPrefixes">
            <summary>
                Get and Set SHA256 Hash Prefixes.
            </summary>
            <remarks>
                Represents the collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings,
                identifying the threats to query.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.#ctor">
            <summary>
                Create a Full Hash Request Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.AddQuery(Gee.External.Browsing.Clients.FullHashQuery)">
            <summary>
                Add a Query.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashQuery" /> indicating a <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <returns>
                This full hash request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.AddQuery(Gee.External.Browsing.ThreatListDescriptor,System.String)">
            <summary>
                Add a Query.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />.
            </param>
            <returns>
                This full hash request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="threatListState" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.AddQuery(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,System.String)">
            <summary>
                Add Query.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to query.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatType" />, <paramref name="platformType" />, and
                <paramref name="threatEntryType" />.
            </param>
            <returns>
                This full hash request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListState" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.AddSha256HashPrefix(System.String)">
            <summary>
                Add a SHA256 Hash Prefix.
            </summary>
            <param name="value">
                A SHA256 hash prefix, formatted as hexadecimal encoded string, identifying a threat to query.
            </param>
            <returns>
                This full hash request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.Build">
            <summary>
                Build a Full Hash Request.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.SetClientMetadata(Gee.External.Browsing.Clients.ClientMetadata)">
            <summary>
                Set Client Metadata.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Clients.ClientMetadata" /> of the client making the full hash request. A null reference
                indicates the metadata of the client is unknown.
            </param>
            <returns>
                This full hash request builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashRequestBuilder.SetClientMetadata(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set Client Metadata.
            </summary>
            <param name="id">
                A unique identifier identifying the client.
            </param>
            <param name="majorVersion">
                The client's major version.
            </param>
            <param name="minorVersion">
                The client's minor version.
            </param>
            <param name="patchVersion">
                The client's patch version.
            </param>
            <returns>
                This full hash request builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if <paramref name="id" /> consists exclusively of whitespace characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="id" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="majorVersion" /> is less than <c>0</c>, or if
                <paramref name="minorVersion" /> is less than <c>0</c>, or if <paramref name="patchVersion" /> is less
                than <c>0</c>.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.FullHashResponse">
            <summary>
                Full Hash Response.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponse.Request">
            <summary>
                Get Request.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> made to the Google Safe Browsing API for which the full
                hash response has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponse.SafeThreatsExpirationDate">
            <summary>
                Get Safe Threats Expiration Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), safe threats should be considered safe to.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponse.SafeThreatsExpired">
            <summary>
                Determine if Safe Threats Have Expired.
            </summary>
            <remarks>
                Determines if safe threats have expired and should no longer be considered safe.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponse.UnsafeThreats">
            <summary>
                Get Unsafe Threats.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" />. An empty collection indicates no threats were
                determined to be unsafe.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponse.WaitToDate">
            <summary>
                Get Wait to Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), a client must wait to before issuing another
                <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> to the Google Safe Browsing API. A null reference indicates a client
                does not have to wait.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponse.Build">
            <summary>
                Build a Full Hash Response.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponseBuilder" /> to build a full hash response with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponse.#ctor(Gee.External.Browsing.Clients.FullHashRequest,System.DateTime,System.Collections.Generic.IEnumerable{Gee.External.Browsing.UnsafeThreat},System.Nullable{System.DateTime})">
            <summary>
                Create a Full Hash Response.
            </summary>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> made to the Google Safe Browsing API for which the full hash
                response has been returned.
            </param>
            <param name="safeThreatsExpirationDate">
                The date, in Coordinated Universal Time (UTC), safe threats should be considered safe to. If the date
                is not in UTC, it is converted to it.
            </param>
            <param name="unsafeThreats">
                A collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" />. A null reference indicates no threats were determined to
                be unsafe.
            </param>
            <param name="waitToDate">
                The date, in Coordinated Universal Time (UTC), a client must wait to before issuing another
                <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> to the Google Safe Browsing API. If the date is not in UTC, it is
                converted to it. A null reference indicates a client does not have to wait.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request"/> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponse.#ctor(Gee.External.Browsing.Clients.FullHashResponseBuilder)">
            <summary>
                Create a Full Hash Response.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponseBuilder" /> to initialize the full hash response with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponse.GetThreatState(System.String)">
            <summary>
                Get a Threat's State.
            </summary>
            <param name="sha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying a threat.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatState" /> indicating the state of the threat identified by
                <paramref name="sha256Hash" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sha256Hash" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.FullHashResponseBuilder">
            <summary>
                Full Hash Response Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponseBuilder.Request">
            <summary>
                Get and Set Request.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> made to the Google Safe Browsing API for which the full
                hash response has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponseBuilder.SafeThreatsExpirationDate">
            <summary>
                Get and Set Safe Threats Expiration Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), safe threats should be considered safe to.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponseBuilder.UnsafeThreats">
            <summary>
                Get and Set Unsafe Threats.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.UnsafeThreat" />. An empty collection indicates no threats were
                determined to be unsafe.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.FullHashResponseBuilder.WaitToDate">
            <summary>
                Get and Set Wait to Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), a client must wait to before issuing another
                <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> to the Google Safe Browsing API. A null reference indicates a client
                does not have to wait.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.#ctor">
            <summary>
                Create a Full Hash Response Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.AddUnsafeThreat(Gee.External.Browsing.UnsafeThreat)">
            <summary>
                Add an Unsafe Threat.
            </summary>
            <param name="value">
                An <see cref="T:Gee.External.Browsing.UnsafeThreat" />.
            </param>
            <returns>
                This full hash response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.AddUnsafeThreat(System.String,Gee.External.Browsing.ThreatListDescriptor,System.DateTime)">
            <summary>
                Add an Unsafe Threat.
            </summary>
            <param name="sha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat.
            </param>
            <param name="associatedThreatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threat is
                associated with.
            </param>
            <param name="expirationDate">
                The date, in Coordinated Universal Time (UTC), the threat should be considered unsafe to. If the date
                is not in UTC, it is converted to it.
            </param>
            <returns>
                This full hash response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sha256Hash" /> is a null reference, or if
                <paramref name="associatedThreatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="sha256Hash" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.Build">
            <summary>
                Build a Full Hash Response.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.SetRequest(Gee.External.Browsing.Clients.FullHashRequest)">
            <summary>
                Set Request.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> made to the Google Safe Browsing API for which the full hash
                response has been returned.
            </param>
            <returns>
                This full hash response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.SetSafeThreatsExpirationDate(System.DateTime)">
            <summary>
                Set Safe Threats Expiration Date.
            </summary>
            <param name="value">
                The date, in Coordinated Universal Time (UTC), safe threats should be considered safe to. If the date
                is not in UTC, it is converted to it.
            </param>
            <returns>
                This full hash response builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.FullHashResponseBuilder.SetWaitToDate(System.Nullable{System.DateTime})">
            <summary>
                Set Wait to Date.
            </summary>
            <param name="value">
                The date, in Coordinated Universal Time (UTC), a client must wait to before issuing another
                <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> to the Google Safe Browsing API. If the date is not in UTC, it is
                converted to it. A null reference indicates a client does not have to wait.
            </param>
            <returns>
                This full hash response builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ClientMetadataExtension">
            <summary>
                Client Metadata Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ClientMetadataExtension.AsClientMetadataModel(Gee.External.Browsing.Clients.ClientMetadata)">
            <summary>
                Create a Client Metadata Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.ClientMetadata" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.Http.ClientMetadataModel" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ClientMetadataModel">
            <summary>
                Client Metadata Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ClientMetadataModel.Id">
            <summary>
                Get and Set Client's Unique Identifier.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ClientMetadataModel.Version">
            <summary>
                Get and Set Client's Version.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.CompressionTypeExtension">
            <summary>
                Compression Type Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.CompressionTypeExtension.AsCompressionType(System.String)">
            <summary>
                Create a Compression Type.
            </summary>
            <param name="this">
                A string identifying a <see cref="T:Gee.External.Browsing.Clients.CompressionType" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.CompressionType" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.CompressionTypeExtension.AsCompressionTypeModel(Gee.External.Browsing.Clients.CompressionType)">
            <summary>
                Create a Compression Type Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.CompressionType" />.
            </param>
            <returns>
                A string identifying a <see cref="T:Gee.External.Browsing.Clients.CompressionType" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.FullHashQueryModel">
            <summary>
                Full Hash Query Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashQueryModel.PlatformTypes">
            <summary>
                Get and Set Platform Types.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashQueryModel.ThreatEntries">
            <summary>
                Get and Set Threat Entries.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashQueryModel.ThreatEntryTypes">
            <summary>
                Get and Set Threat Entry Types.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashQueryModel.ThreatTypes">
            <summary>
                Get and Set Threat Types.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.FullHashRequestExtension">
            <summary>
                Full Hash Request Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.FullHashRequestExtension.AsFullHashRequestModel(Gee.External.Browsing.Clients.FullHashRequest)">
            <summary>
                Create a Full Hash Request Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.Http.FullHashRequestModel" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.FullHashRequestModel">
            <summary>
                Full Hash Request Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashRequestModel.ClientMetadata">
            <summary>
                Get and Set Client Metadata.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashRequestModel.Query">
            <summary>
                Get and Set Query.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashRequestModel.ThreatListStates">
            <summary>
                Get and Set Threat List States.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashResponseModel.SafeThreatsDuration">
            <summary>
                Get and Set Safe Threats Duration.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashResponseModel.UnsafeThreats">
            <summary>
                Get and Set Unsafe Threats.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.FullHashResponseModel.WaitDuration">
            <summary>
                Get and Set Wait Duration.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.FullHashResponseModelExtension">
            <summary>
                Full Hash Response Model Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.FullHashResponseModelExtension.AsFullHashResponse(Gee.External.Browsing.Clients.Http.FullHashResponseModel,Gee.External.Browsing.Clients.FullHashRequest)">
            <summary>
                Create a Full Hash Response.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.Http.FullHashResponseModel" />.
            </param>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" /> made to the Google Safe Browsing API for which the
                <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" /> has been returned.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" /> if <paramref name="this" /> is not a null reference. A null reference
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.HttpBrowsingClient">
            <summary>
                HTTP Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.ApiKeyQueryParameterName">
            <summary>
                API Key Query Parameter Name.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.BaseUri">
            <summary>
                Base URI.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.FindFullHashesUri">
            <summary>
                Find Full Hashes URI.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.GetThreatListDescriptorsUri">
            <summary>
                Get ThreatList Descriptors URI.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.GetThreatListUpdatesUri">
            <summary>
                Get Threat List Updates URI.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient._apiKey">
            <summary>
                API Key.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.Http.HttpBrowsingClient._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.#ctor(System.String)">
            <summary>
                Create a Browsing Client.
            </summary>
            <param name="apiKey">
                A Google Safe Browsing API key to authenticate to the Google Safe Browsing API with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="apiKey" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.FindFullHashesAsync(Gee.External.Browsing.Clients.FullHashRequest,System.Threading.CancellationToken)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.GetThreatListDescriptorsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat List Descriptors Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.HttpClientFactory">
            <summary>
                HTTP Client Factory.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.HttpClientFactory.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <summary>
                Create an HTTP Client.
            </summary>
            <param name="httpMessageHandler">
                An HTTP message handler for the HTTP client to use.
            </param>
            <returns>
                An HTTP client.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.HttpBrowsingClient.HttpClientFactory.CreateMessageHandler">
            <summary>
                Create an HTTP Message Handler.
            </summary>
            <returns>
                An HTTP message handler.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.PlatformTypeExtension">
            <summary>
                Platform Type Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.PlatformTypeExtension.AsPlatformType(System.String)">
            <summary>
                Create a Platform Type.
            </summary>
            <param name="this">
                A string identifying a <see cref="T:Gee.External.Browsing.PlatformType" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.PlatformType" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.PlatformTypeExtension.AsPlatformTypeModel(Gee.External.Browsing.PlatformType)">
            <summary>
                Create a Platform Type Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.PlatformType" />.
            </param>
            <returns>
                A string identifying a <see cref="T:Gee.External.Browsing.PlatformType" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatEntryMetadataEntryModel">
            <summary>
                Threat Entry Metadata Entry Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntryMetadataEntryModel.Key">
            <summary>
                Get and Set Threat Entry's Metadata Key.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntryMetadataEntryModel.Value">
            <summary>
                Get and Set Threat Entry's Metadata Value.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatEntryMetadataModel">
            <summary>
                Threat Entry Metadata Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntryMetadataModel.Entries">
            <summary>
                Get and Set Threat Entry's Metadata Entries.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatEntryModel">
            <summary>
                Threat Entry Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntryModel.Sha256Hash">
            <summary>
                Get and Set SHA256 Hash.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel">
            <summary>
                Threat Entry Set Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel.CompressionType">
            <summary>
                Get and Set Compression Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel.UncompressedIndices">
            <summary>
                Get and Set Uncompressed Indices.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatEntrySetModel.UncompressedSha256HashPrefixes">
            <summary>
                Get and Set Uncompressed SHA256 Hashes.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatEntryTypeExtension">
            <summary>
                Threat Entry Type Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatEntryTypeExtension.AsThreatEntryType(System.String)">
            <summary>
                Create a Threat Entry Type.
            </summary>
            <param name="this">
                A string identifying a <see cref="T:Gee.External.Browsing.ThreatEntryType" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatEntryTypeExtension.AsThreatEntryTypeModel(Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Create a Threat Entry Type Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" />.
            </param>
            <returns>
                A string identifying a <see cref="T:Gee.External.Browsing.ThreatEntryType" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel">
            <summary>
                Threat List Descriptor Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel.PlatformType">
            <summary>
                Get and Set Platform Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel.ThreatEntryType">
            <summary>
                Get and Set Threat Entry Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel.ThreatType">
            <summary>
                Get and Set Threat Type.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModelExtension">
            <summary>
                Threat List Descriptor Model Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModelExtension.AsThreatListDescriptor(Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel)">
            <summary>
                Create a Threat List Descriptor.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListDescriptorModel" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListDescriptorResponseModel">
            <summary>
                Threat List Descriptor Response Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListDescriptorResponseModel.ThreatListDescriptors">
            <summary>
                Get and Set Threat List Descriptors.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateChecksumModel">
            <summary>
                Threat List Update Checksum Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateChecksumModel.Sha256Hash">
            <summary>
                Get and Set SHA256 Hash.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsExtension">
            <summary>
                Threat List Update Constraints Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsExtension.AsClientConstraintsModel(Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Create a Threat List Update Constraints Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel" /> if <paramref name="this" /> is not a null reference.
                A null reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel">
            <summary>
                Threat List Update Constraints Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.ClientLocation">
            <summary>
                Get and Set Client Location.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.MaximumDatabaseEntries">
            <summary>
                Get and Set Maximum Database Entries.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.MaximumResponseEntries">
            <summary>
                Get and Set Maximum Response Entries.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.SupportedCompressionTypes">
            <summary>
                Get and Set Supported Compressions.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.ThreatListLanguage">
            <summary>
                Get and Set Threat List Language.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateConstraintsModel.ThreatListLocation">
            <summary>
                Get and Set Threat List Location.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateHashModel">
            <summary>
                Threat List Update Hash Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateHashModel.Sha256HashPrefixes">
            <summary>
                Get and Set SHA256 Hash Prefixes.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateHashModel.Sha256HashPrefixSize">
            <summary>
                Get and Set SHA256 Hash Prefix Size.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateIndexModel">
            <summary>
                Threat List Update Index Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateIndexModel.Indices">
            <summary>
                Get and Set Indices.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryExtension">
            <summary>
                Threat List Update Query Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryExtension.AsThreatListUpdateQueryModel(Gee.External.Browsing.Clients.ThreatListUpdateQuery)">
            <summary>
                Create a Threat List Update Query Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel">
            <summary>
                Threat List Update Query Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel.Constraints">
            <summary>
                Get and Set Constraints.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel.PlatformType">
            <summary>
                Get and Set Platform Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel.ThreatEntryType">
            <summary>
                Get and Set Threat Entry Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel.ThreatListState">
            <summary>
                Get and Set Threat List State.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateQueryModel.ThreatType">
            <summary>
                Get and Set Threat Type.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestExtension">
            <summary>
                Threat List Update Request Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestExtension.AsThreatListUpdateRequestModel(Gee.External.Browsing.Clients.ThreatListUpdateRequest)">
            <summary>
                Create a Threat List Update Request Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestModel" /> if <paramref name="this" /> is not a null reference. A
                null reference otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestModel">
            <summary>
                Threat List Update Request Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestModel.ClientMetadata">
            <summary>
                Get and Set Client Metadata.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateRequestModel.Queries">
            <summary>
                Get and Set Queries.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModel">
            <summary>
                Threat List Update Response Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModel.Results">
            <summary>
                Get and Set Results.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModel.WaitDuration">
            <summary>
                Get and Set Wait Duration.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModelExtension">
            <summary>
                Threat List Update Response Model Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModelExtension.AsThreatListUpdateResponse(Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModel,Gee.External.Browsing.Clients.ThreatListUpdateRequest)">
            <summary>
                Create a Threat List Update Response.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResponseModel" />.
            </param>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which the
                <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" /> has been returned.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel">
            <summary>
                Threat List Update Result Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.Checksum">
            <summary>
                Get and Set Checksum.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.PlatformType">
            <summary>
                Get and Set Platform Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.ThreatEntryType">
            <summary>
                Get and Set Threat Entry Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.ThreatListState">
            <summary>
                Get and Set Threat List State.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.ThreatsToAdd">
            <summary>
                Get and Set Threats to Add.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.ThreatsToRemove">
            <summary>
                Get and Set Threats to Remove.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.ThreatType">
            <summary>
                Get and Set Threat Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel.UpdateType">
            <summary>
                Get and Set Update Type.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModelExtension">
            <summary>
                Threat List Update Result Model Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModelExtension.AsThreatListUpdateResult(Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel,Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
                Create a Threat List Update Result.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateResultModel" />.
            </param>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which the
                <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> has been returned.
            </param>
            <param name="threatListRetrieveDate">
                The date, in Coordinated Universal Time (UTC), the <see cref="T:Gee.External.Browsing.ThreatList" /> was retrieved from the
                Google Safe Browsing API. If the date is not expressed in UTC, it is converted to it.
            </param>
            <param name="threatListWaitToDate">
                The date, in Coordinated Universal Time (UTC), a client must wait to before retrieving the
                <see cref="T:Gee.External.Browsing.ThreatList" /> from the Google Safe Browsing API again. If the date is not expressed in UTC,
                it is converted to it. A null reference indicates a client does not need to wait.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> if <paramref name="this" /> is not a null reference. A null
                reference otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatListUpdateTypeExtension">
            <summary>
                Threat List Update Type Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateTypeExtension.AsThreatListUpdateType(System.String)">
            <summary>
                Create a Threat List Update Type.
            </summary>
            <param name="this">
                A string identifying a <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatListUpdateTypeExtension.AsThreatListUpdateTypeModel(Gee.External.Browsing.Clients.ThreatListUpdateType)">
            <summary>
                Create a Threat List Update Type Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" />.
            </param>
            <returns>
                A string identifying a <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.ThreatTypeExtension">
            <summary>
                Threat Type Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatTypeExtension.AsThreatType(System.String)">
            <summary>
                Create a Threat Type.
            </summary>
            <param name="this">
                A string identifying a <see cref="T:Gee.External.Browsing.ThreatType" />.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.ThreatType" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.ThreatTypeExtension.AsThreatTypeModel(Gee.External.Browsing.ThreatType)">
            <summary>
                Create a Threat Type Model.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.ThreatType" />.
            </param>
            <returns>
                A string identifying a <see cref="T:Gee.External.Browsing.ThreatType" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.UnsafeThreatModel">
            <summary>
                Unsafe Threat Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.CacheDuration">
            <summary>
                Get and Set Cache Duration.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.Metadata">
            <summary>
                Get and Set Metadata.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.PlatformType">
            <summary>
                Get and Set Platform Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.Threat">
            <summary>
                Get and Set Threat.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.ThreatEntryType">
            <summary>
                Get and Set Threat Entry Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.Http.UnsafeThreatModel.ThreatType">
            <summary>
                Get and Set Threat Type.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.Http.UnsafeThreatModelExtension">
            <summary>
                Unsafe Threat Model Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.Http.UnsafeThreatModelExtension.AsUnsafeThreat(Gee.External.Browsing.Clients.Http.UnsafeThreatModel)">
            <summary>
                Create an Unsafe Threat.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Clients.Http.UnsafeThreatModel" />.
            </param>
            <returns>
                An <see cref="T:Gee.External.Browsing.UnsafeThreat" /> if <paramref name="this" /> is not a null reference. A null reference
                otherwise.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.IBrowsingClient">
            <summary>
                Abstract Client.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.IBrowsingClient.FindFullHashesAsync(Gee.External.Browsing.Clients.FullHashRequest,System.Threading.CancellationToken)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.IBrowsingClient.GetThreatListDescriptorsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat List Descriptors Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.IBrowsingClient.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ResilientBrowsingClient">
            <summary>
                Resilient Client.
            </summary>
            <remarks>
                <para>
                    Represents a resilient client that automatically retries failed operations performed on a
                    <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />. The number of retry attempts is either caller or
                    implementation specific if you do not specify a value. Between each retry attempt, the resilient client
                    will pause for an implementation specific interval. If all retry attempts are exhausted and the
                    attempted operation never succeeds, the exception the failed operation threw will be propagated up to
                    you.
                </para>
                <para>
                    The Google Safe Browsing API requires clients to implement a "back-off" mode when an attempted
                    operation fails. A failed operation, in this context, means an unsuccessful HTTP response for an HTTP
                    request. A resilient client does not implement this "back-off" mode because, quite frankly, it is quite
                    unrealistic to implement it in an API. The minimum and maximum intervals between retry attempts
                    required by the "back-off" mode are 15 minutes and 24 hours, respectively. It is not realistic to
                    declare a method in an API that, at best, returns after 15 minutes or, at worst, returns after 24 hours
                    if it retries a failed operation. As such, a resilient client only considers network time-outs as
                    failed operations and will only retry those. A network time-out means the Google Safe Browsing API is
                    taking too long to reply to an HTTP request and there isn't an HTTP response to fulfill it in a
                    predetermined period of time. As such, it should be exempt from the required "back-off" mode
                    implementation.
                </para>
                <para>
                    If you specify a number of retry attempts when you create a resilient client, be practical with the
                    value you specify. The resilient client will pause for an implementation specific interval between each
                    retry attempt, which effectively means if an attempted operation always fails, the exception it threw
                    will not be propagated up to you until all the retry attempts are exhausted. If you specify a very high
                    number of retry attempts, this could have self inflicted performance implications.
                </para>
                <para>
                    When you create a resilient client, you can specify whether or not it takes ownership of the client you
                    want to proxy to and dispose it when the resilient client itself is disposed. The recommended behavior
                    is that you allow the resilient client to take ownership of the client you want to proxy to but take
                    note that if you reference or dispose the client you want to proxy to after you create the resilient
                    client, the behavior of the resilient client and client you want to proxy to is undefined.
                </para>
                <para>
                    Since a resilient client itself implements <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />, it is technically possible
                    to create a new resilient client for an existing resilient client, though the reasons for doing so, in
                    most cases, are unjustified. To avoid doing do, consider creating a resilient client using
                    <see cref="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Create(Gee.External.Browsing.Clients.IBrowsingClient)" />, or one of its overloads, instead of one of the constructor
                    overloads. <see cref="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Create(Gee.External.Browsing.Clients.IBrowsingClient)" /> will conveniently create a resilient client if, and
                    only if, the client you want to proxy to itself is not a resilient client.
                </para>
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ResilientBrowsingClient._client">
            <summary>
                Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ResilientBrowsingClient._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ResilientBrowsingClient._ownClient">
            <summary>
                Own Client Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ResilientBrowsingClient._resiliencyPolicy">
            <summary>
                Resiliency Policy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ResilientBrowsingClient._retryAttempts">
            <summary>
                Retry Attempts.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Create(Gee.External.Browsing.Clients.IBrowsingClient)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The resilient client takes ownership of
                <paramref name="client" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="client" /> is undefined.
            </param>
            <returns>
                A resilient client.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Create(Gee.External.Browsing.Clients.IBrowsingClient,System.Int32)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The resilient client takes ownership of
                <paramref name="client" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="client" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Create(Gee.External.Browsing.Clients.IBrowsingClient,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownClient">
                A boolean flag indicating whether or not the resilient client takes ownership of
                <paramref name="client" /> and disposes it when the resilient client itself is disposed. If the
                resilient client takes ownership of <paramref name="client" /> and you reference or dispose
                <paramref name="client" /> after you create the resilient client, the behavior of the resilient client
                and <paramref name="client" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.#ctor(Gee.External.Browsing.Clients.IBrowsingClient)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The resilient client takes ownership of
                <paramref name="client" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="client" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.#ctor(Gee.External.Browsing.Clients.IBrowsingClient,System.Int32)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to. The resilient client takes ownership of
                <paramref name="client" /> and will dispose it when the resilient cache itself is disposed. If you
                reference or dispose <paramref name="client" /> after you create the resilient cache, the behavior of
                the resilient cache and <paramref name="client" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.#ctor(Gee.External.Browsing.Clients.IBrowsingClient,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Client.
            </summary>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownClient">
                A boolean flag indicating whether or not the resilient client takes ownership of
                <paramref name="client" /> and disposes it when the resilient client itself is disposed. If the
                resilient client takes ownership of <paramref name="client" /> and you reference or dispose
                <paramref name="client" /> after you create the resilient client, the behavior of the resilient client
                and <paramref name="client" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="client" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.ExecuteResiliencyPolicyAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Execute a Resiliency Policy Action.
            </summary>
            <typeparam name="T">
                The return type of <paramref name="resiliencyPolicyAction" />.
            </typeparam>
            <param name="resiliencyPolicyAction">
                An action for the resilience policy to execute.
            </param>
            <returns>
                The return value of <paramref name="resiliencyPolicyAction" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.FindFullHashesAsync(Gee.External.Browsing.Clients.FullHashRequest,System.Threading.CancellationToken)">
            <summary>
                Find Full Hashes Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.FullHashRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.FullHashResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.GetThreatListDescriptorsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat List Descriptors Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.GetThreatListUpdatesAsync(Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.Threading.CancellationToken)">
            <summary>
                Get Threat List Updates Asynchronously.
            </summary>
            <param name="request">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
            <exception cref="T:System.TimeoutException">
                Thrown if communication with the Google Safe Browsing API times out.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ResilientBrowsingClient.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints">
            <summary>
                Threat List Update Constraints.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.Default">
            <summary>
                Default Threat List Update Constraints.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.ClientLocation">
            <summary>
                Get Client Location.
            </summary>
            <remarks>
                Represents the geographic location, formatted as an ISO 31166-1 alpha-2 region code, of a client. An
                invalid geographic location is ignored by the Google Safe Browsing API. A null reference indicates the
                geographic location of the client is unknown.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.MaximumDatabaseEntries">
            <summary>
                Get Maximum Database Entries.
            </summary>
            <remarks>
                Represents the maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> a client is
                willing, or is capable, of storing in its local <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />. A <c>0</c>
                indicates there is no limit to the number of threats the client is willing to store.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.MaximumResponseEntries">
            <summary>
                Get Maximum Response Entries.
            </summary>
            <remarks>
                Represents the maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> that will be
                retrieved in a single request. A <c>0</c> indicates there is no limit to the number of threats that
                will be retrieved.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.ThreatListLanguage">
            <summary>
                Get Threat List Language.
            </summary>
            <remarks>
                Represents the language, formatted as an ISO 639 alpha-2 language code, a <see cref="T:Gee.External.Browsing.ThreatList" />
                should be retrieved for. An invalid language is ignored by the Google Safe Browsing API. A null
                reference indicates a language should not be considered.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.ThreatListLocation">
            <summary>
                Get Threat List Location.
            </summary>
            <remarks>
                Represents the geographic location, formatted as an ISO 31166-1 alpha-2 region code, a
                <see cref="T:Gee.External.Browsing.ThreatList" /> should be retrieved for. An invalid geographic location is ignored by the
                Google Safe Browsing API. A null reference indicates a geographic location should not be considered.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.#cctor">
            <summary>
                Create a Threat List Update Constraints.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.Build">
            <summary>
                Build a Threat List Update Constraints.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder" /> to build a threat list update constraints with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraints.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder)">
            <summary>
                Create a Threat List Update Constraints.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder" /> to initialize the  threat list update constraints
                with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder">
            <summary>
                Threat List Update Constraints Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.ClientLocation">
            <summary>
                Get and Set Client Location.
            </summary>
            <remarks>
                Represents the geographic location, formatted as an ISO 31166-1 alpha-2 region code, of a client. An
                invalid geographic location is ignored by the Google Safe Browsing API. A null reference indicates the
                geographic location of the client is unknown.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.MaximumDatabaseEntries">
            <summary>
                Get and Set Maximum Database Entries.
            </summary>
            <remarks>
                Represents the maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> a client is
                willing, or is capable, of storing in its local <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />. A <c>0</c>
                indicates there is no limit to the number of threats the client is willing to store.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.MaximumResponseEntries">
            <summary>
                Get and Set Maximum Response Entries.
            </summary>
            <remarks>
                Represents the maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> that will be
                retrieved in a single request. A <c>0</c> indicates there is no limit to the number of threats that
                will be retrieved.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.ThreatListLanguage">
            <summary>
                Get and Set Threat List Language.
            </summary>
            <remarks>
                Represents the language, formatted as an ISO 639 alpha-2 language code, a <see cref="T:Gee.External.Browsing.ThreatList" />
                should be retrieved for. An invalid language is ignored by the Google Safe Browsing API. A null
                reference indicates a language should not be considered.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.ThreatListLocation">
            <summary>
                Get and Set Threat List Location.
            </summary>
            <remarks>
                Represents the geographic location, formatted as an ISO 31166-1 alpha-2 region code, a
                <see cref="T:Gee.External.Browsing.ThreatList" /> should be retrieved for. An invalid geographic location is ignored by the
                Google Safe Browsing API. A null reference indicates a geographic location should not be considered.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.Build">
            <summary>
                Build a Threat List Update Constraints.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.SetClientLocation(System.String)">
            <summary>
                Set Client Location.
            </summary>
            <param name="value">
                The geographic location, formatted as an ISO 31166-1 alpha-2 region code, of a client. An invalid
                geographic location is ignored by the Google Safe Browsing API. A null reference indicates the
                geographic location of the client is unknown.
            </param>
            <returns>
                This threat list update constraints builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.SetMaximumDatabaseEntries(System.Int32)">
            <summary>
                Set Maximum Database Entries.
            </summary>
            <param name="value">
                The maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> a client is willing, or is
                capable, of storing in its local <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />. A <c>0</c> indicates there is
                no limit to the number of threats the client is willing to store.
            </param>
            <returns>
                This threat list update constraints builder.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> is less than <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.SetMaximumResponseEntries(System.Int32)">
            <summary>
                Set Maximum Response Entries.
            </summary>
            <param name="value">
                The maximum number of threats associated with a <see cref="T:Gee.External.Browsing.ThreatList" /> that will be retrieved in a
                single request. A <c>0</c> indicates there is no limit to the number of threats that will be
                retrieved.
            </param>
            <returns>
                This threat list update constraints builder.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> is less than <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.SetThreatListLanguage(System.String)">
            <summary>
                Set Threat List Language.
            </summary>
            <param name="value">
                The language, formatted as an ISO 639 alpha-2 language code, a <see cref="T:Gee.External.Browsing.ThreatList" /> should be
                retrieved for. An invalid language is ignored by the Google Safe Browsing API. A null reference
                indicates a language should not be considered.
            </param>
            <returns>
                This threat list update constraints builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder.SetThreatListLocation(System.String)">
            <summary>
                Set Threat List Location.
            </summary>
            <param name="value">
                The geographic location, formatted as an ISO 31166-1 alpha-2 region code, a <see cref="T:Gee.External.Browsing.ThreatList" />
                should be retrieved for. An invalid geographic location is ignored by the Google Safe Browsing API. A
                null reference indicates a geographic location should not be considered.
            </param>
            <returns>
                This threat list update constraints builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery">
            <summary>
                Threat List Update Query.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQuery.ThreatListDescriptor">
            <summary>
                Get Threat List Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />
                to retrieve.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQuery.ThreatListState">
            <summary>
                Get Threat List State.
            </summary>
            <remarks>
                Represents the state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" />
                identified by <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateQuery.ThreatListDescriptor" />. A null reference indicates the state of the threat
                list is unknown and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQuery.UpdateConstraints">
            <summary>
                Get Update Constraints.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" />
                identified by <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateQuery.ThreatListDescriptor" /> is retrieved. A null reference indicates no update
                constraints should be applied.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.Build">
            <summary>
                Build a Threat List Update Query.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder" /> to build the threat list update query with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.#ctor(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Create a Threat List Update Query.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.#ctor(Gee.External.Browsing.ThreatListDescriptor,System.String)">
            <summary>
                Create a Threat List Update Query.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. This should be the value returned by the Google Safe Browsing
                API when the threat list was most recently retrieved. An invalid state will be ignored by the Google
                Safe Browsing API and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update. A null reference indicates the state of the threat
                list is unknown and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not a null reference and it is not hexadecimal
                encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.#ctor(Gee.External.Browsing.ThreatListDescriptor,System.String,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Create a Threat List Update Query.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. This should be the value returned by the Google Safe Browsing
                API when the threat list was most recently retrieved. An invalid state will be ignored by the Google
                Safe Browsing API and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update. A null reference indicates the state of the threat
                list is unknown and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> identified
                by <paramref name="threatListDescriptor" /> is retrieved. A null reference indicates no update
                constraints should be applied.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not a null reference and it is not hexadecimal
                encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder)">
            <summary>
                Create a Threat List Update Query.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder" /> to initialize the threat list update query with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQuery.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder">
            <summary>
                Threat List Update Query Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.ThreatListDescriptor">
            <summary>
                Get and Set Threat List Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />
                to retrieve.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.ThreatListState">
            <summary>
                Get and Set Threat List State.
            </summary>
            <remarks>
                Represents the state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" />
                identified by <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.ThreatListDescriptor" />. A null reference indicates the state of the threat
                list is unknown and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.UpdateConstraints">
            <summary>
                Get and Set Update Constraints.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" />
                identified by <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.ThreatListDescriptor" /> is retrieved. A null reference indicates no update
                constraints should be applied.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.Build">
            <summary>
                Build a Threat List Update Query.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.SetThreatListDescriptor(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Set Threat List Descriptor.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                This threat list update query builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.SetThreatListDescriptor(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Set Threat List Descriptor.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                This threat list update query builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.SetThreatListState(System.String)">
            <summary>
                Set Threat List State.
            </summary>
            <param name="value">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
                This should be the value returned by the Google Safe Browsing API when the threat list was most
                recently retrieved. An invalid state will be ignored by the Google Safe Browsing API and will force
                the threat list to be retrieved as a <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update. A null reference
                indicates the state of the threat list is unknown and will force the threat list to be retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </param>
            <returns>
                This threat list update query builder.
            </returns>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> is not a null reference and it is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.SetUpdateConstraints(System.Func{Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Set Update Constraints.
            </summary>
            <param name="valueAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the
                <see cref="T:Gee.External.Browsing.ThreatList" /> is retrieved.
            </param>
            <returns>
                This threat list update query builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder.SetUpdateConstraints(Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Set Update Constraints.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> is
                retrieved. A null reference indicates no update constraints should be applied.
            </param>
            <returns>
                This threat list update query builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest">
            <summary>
                Threat List Update Request.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateRequest.ClientMetadata">
            <summary>
                Get Client Metadata.
            </summary>
            <remarks>
                Represents the metadata of the client making the threat list update request.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateRequest.Queries">
            <summary>
                Get Queries.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequest.Build">
            <summary>
                Build a Threat List Update Request.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder" /> to build a threat list update request with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequest.#ctor(System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.ThreatListUpdateQuery})">
            <summary>
                Create a Threat List Update Request.
            </summary>
            <param name="queries">
                A collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="queries" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequest.#ctor(System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.ThreatListUpdateQuery},Gee.External.Browsing.Clients.ClientMetadata)">
            <summary>
                Create a Threat List Update Request.
            </summary>
            <param name="queries">
                A collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="clientMetadata">
                The metadata of the client making the threat list update request. A null reference indicates the
                client's metadata is unknown.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="queries" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequest.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder)">
            <summary>
                Create a Threat List Update Request.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder" /> to initialize the threat list update request with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder">
            <summary>
                Threat List Update Request Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.ClientMetadata">
            <summary>
                Get and Set Client Metadata.
            </summary>
            <remarks>
                Represents the metadata of the client making the threat list update request.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.Queries">
            <summary>
                Get and Set Queries.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.#ctor">
            <summary>
                Create a Threat List Update Request Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.AddQuery(System.Func{Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder,Gee.External.Browsing.Clients.ThreatListUpdateQuery})">
            <summary>
                Add a Query.
            </summary>
            <param name="valueAction">
                An action to create a <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating a <see cref="T:Gee.External.Browsing.ThreatList" /> to
                retrieve.
            </param>
            <returns>
                This threat list update request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.AddQuery(Gee.External.Browsing.Clients.ThreatListUpdateQuery)">
            <summary>
                Add a Query.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> indicating a <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                This threat list update request builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.Build">
            <summary>
                Build a Threat List Update Request.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.SetClientMetadata(Gee.External.Browsing.Clients.ClientMetadata)">
            <summary>
                Set Client Metadata.
            </summary>
            <param name="value">
                The metadata of the client making the threat list update request. A null reference indicates the
                client's metadata is unknown.
            </param>
            <returns>
                This threat list update request builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder.SetClientMetadata(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set Client Metadata.
            </summary>
            <param name="id">
                A unique identifier identifying the client.
            </param>
            <param name="majorVersion">
                The client's major version.
            </param>
            <param name="minorVersion">
                The client's minor version.
            </param>
            <param name="patchVersion">
                The client's patch version.
            </param>
            <returns>
                This threat list update request builder.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if <paramref name="id" /> consists exclusively of whitespace characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="id" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="majorVersion" /> is less than <c>0</c>, or if
                <paramref name="minorVersion" /> is less than <c>0</c>, or if <paramref name="patchVersion" /> is less
                than <c>0</c>.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse">
            <summary>
                Threat List Update Response.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResponse.Request">
            <summary>
                Get Request.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which
                the threat list update response has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResponse.Results">
            <summary>
                Get Results.
            </summary>
            <remarks>
                Represents a collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating the collection of
                retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and the threats associated with them that should be added to and
                removed from the locally stored copies of the threat lists. An empty collection indicates no threat
                lists were retrieved.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponse.Build">
            <summary>
                Build a Threat List Update Response.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder" /> to build a threat list update response with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponse.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateRequest)">
            <summary>
                Create a Threat List Update Response.
            </summary>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which the threat
                list update response has been returned.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponse.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateRequest,System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.ThreatListUpdateResult})">
            <summary>
                Create a Threat List Update Response.
            </summary>
            <param name="request">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which the threat
                list update response has been returned.
            </param>
            <param name="results">
                A collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> and the threats associated with them that should be added to and removed
                from the locally stored copies of the threat lists. A null reference or an empty collection indicates
                no threat lists were retrieved.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="request" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponse.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder)">
            <summary>
                Create a Threat List Update Response.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder" /> to initialize the threat list update response with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder">
            <summary>
                Threat List Update Response Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.Request">
            <summary>
                Get and Set Request.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which
                the threat list update response has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.Results">
            <summary>
                Get and Set Results.
            </summary>
            <remarks>
                Represents a collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating the collection of
                retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and the threats associated with them that should be added to and
                removed from the locally stored copies of the threat lists. An empty collection indicates no threat
                lists were retrieved.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.#ctor">
            <summary>
                Create a Threat List Update Response Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.AddResult(System.Func{Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder,Gee.External.Browsing.Clients.ThreatListUpdateResult})">
            <summary>
                Add a Result.
            </summary>
            <param name="valueAction">
                An action to create a <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating a retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> and the threats associated with it that should be added to and removed from
                the locally stored copy of the threat list.
            </param>
            <returns>
                This threat list update response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.AddResult(Gee.External.Browsing.Clients.ThreatListUpdateResult)">
            <summary>
                Add a Result.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating a retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and the
                threats associated with it that should be added to and removed from the locally stored copy of the
                threat list.
            </param>
            <returns>
                This threat list update response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.Build">
            <summary>
                Build a Threat List Update Response.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResponse" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.SetRequest(System.Func{Gee.External.Browsing.Clients.ThreatListUpdateRequestBuilder,Gee.External.Browsing.Clients.ThreatListUpdateRequest})">
            <summary>
                Set Request.
            </summary>
            <param name="valueAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API
                for which the threat list update response has been returned.
            </param>
            <returns>
                This threat list update response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.SetRequest(Gee.External.Browsing.Clients.ThreatListUpdateRequest)">
            <summary>
                Set Request.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateRequest" /> made to the Google Safe Browsing API for which the threat
                list update response has been returned.
            </param>
            <returns>
                This threat list update response builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResponseBuilder.SetResults(System.Collections.Generic.IEnumerable{Gee.External.Browsing.Clients.ThreatListUpdateResult})">
            <summary>
                Set Results.
            </summary>
            <param name="value">
                A collection of <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" /> indicating the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> and the threats associated with them that should be added to and removed
                from the locally stored copies of the threat lists. A null reference or an empty collection indicates
                no threat lists were retrieved.
            </param>
            <returns>
                This threat list update response builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateResult">
            <summary>
                Threat List Update Result.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatListUpdateResult._threatsToRemove">
            <summary>
                Threats to Remove.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.IsFullUpdate">
            <summary>
                Determine if Threat List Was Retrieved as a Full Update.
            </summary>
            <remarks>
                Determines if the <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" /> was retrieved from the Google Safe Browsing API
                as a <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full" /> update.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.IsPartialUpdate">
            <summary>
                Determine if Threat List Was Retrieved as a Partial Update.
            </summary>
            <remarks>
                Determines if the <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" /> was retrieved from the Google Safe Browsing API
                as a <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Partial" /> update.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.Query">
            <summary>
                Get Query.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> made to the Google Safe Browsing API for which the
                threat list update result has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList">
            <summary>
                Get Retrieved Threat List.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatList" /> retrieved from the Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatListChecksum">
            <summary>
                Get Retrieved Threat List's Checksum.
            </summary>
            <remarks>
                Represents the checksum, formatted as a hexadecimal encoded string, of the lexicographically sorted
                <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.ThreatsToAdd">
            <summary>
                Get Threats to Add.
            </summary>
            <remarks>
                Represents the collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings,
                identifying the threats associated with the <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" /> and should be added to
                the locally stored copy of the <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates there are no
                threats to add.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.ThreatsToRemove">
            <summary>
                Get Threats to Remove.
            </summary>
            <remarks>
                Represents the collection of zero-based indices identifying the threats associated with the
                lexicographically sorted <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" /> and should be removed from the locally
                stored copy of the <see cref="T:Gee.External.Browsing.ThreatList" /> if, and only if, the threat list was retrieved as a
                <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Partial" /> update. To determine if the threat list was retrieved as a
                partial update, call <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.IsPartialUpdate" />. An empty collection indicates there are no
                threats to remove.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the threat list was not retrieved as a <see cref="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Partial" /> update.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.UpdateType">
            <summary>
                Get Update Type.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" /> indicating how the
                <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.RetrievedThreatList" /> was retrieved from the Google Safe Browsing API. You can also
                conveniently use <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.IsFullUpdate" /> and <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResult.IsPartialUpdate" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResult.Build">
            <summary>
                Build a Threat List Update Result.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder" /> to build a threat list update result with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResult.#ctor(Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder)">
            <summary>
                Create a Threat List Update Result.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder" /> to initialize the threat list update result with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder">
            <summary>
                Threat List Update Result Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.Query">
            <summary>
                Get and Set Query.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> made to the Google Safe Browsing API for which the
                threat list update result has been returned.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatList">
            <summary>
                Get and Set Retrieved Threat List.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatList" /> retrieved from the Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatListChecksum">
            <summary>
                Get and Set Retrieved Threat List's Checksum.
            </summary>
            <remarks>
                Represents the checksum, formatted as a hexadecimal encoded string, of the lexicographically sorted
                <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatList" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.ThreatsToAdd">
            <summary>
                Get and Set Threats to Add.
            </summary>
            <remarks>
                Represents the collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings,
                identifying the threats associated with the <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatList" /> and should be added to
                the locally stored copy of the <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates there are no
                threats to add.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.ThreatsToRemove">
            <summary>
                Get and Set Threats to Remove.
            </summary>
            <remarks>
                Represents the collection of zero-based indices identifying the threats associated with the
                lexicographically sorted <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatList" /> and should be removed from the locally
                stored copy of the <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates there are no threats to
                remove.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.UpdateType">
            <summary>
                Get and Set Update Type.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" /> indicating how the
                <see cref="P:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.RetrievedThreatList" /> was retrieved.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.#ctor">
            <summary>
                Create a Threat List Update Result Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.AddThreatToAdd(System.String)">
            <summary>
                Add a Threat to Add.
            </summary>
            <param name="value">
                A SHA256 hash prefix, formatted as hexadecimal encoded string, identifying a threat associated with
                the retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and should be added to the locally stored copy of the threat
                list.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.AddThreatToRemove(System.Int32)">
            <summary>
                Add a Threat to Remove.
            </summary>
            <param name="value">
                A zero-based index identifying a threat associated with the lexicographically sorted retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> and should be removed from the locally stored copy of the threat list.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> is less than <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.Build">
            <summary>
                Build a Threat List Update Result.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateResult" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetQuery(System.Func{Gee.External.Browsing.Clients.ThreatListUpdateQueryBuilder,Gee.External.Browsing.Clients.ThreatListUpdateQuery})">
            <summary>
                Set Query.
            </summary>
            <param name="valueAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> made to the Google Safe Browsing API for
                which the threat list update result has been returned.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetQuery(Gee.External.Browsing.Clients.ThreatListUpdateQuery)">
            <summary>
                Set Query.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateQuery" /> made to the Google Safe Browsing API for which the threat
                list update result has been returned.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetRetrievedThreatList(System.Func{Gee.External.Browsing.ThreatListBuilder,Gee.External.Browsing.ThreatList})">
            <summary>
                Set Retrieved Threat List.
            </summary>
            <param name="valueAction">
                An action to create the <see cref="T:Gee.External.Browsing.ThreatList" /> retrieved from the Google Safe Browsing API.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="valueAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetRetrievedThreatList(Gee.External.Browsing.ThreatList)">
            <summary>
                Set Retrieved Threat List.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.ThreatList" /> retrieved from the Google Safe Browsing API.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetRetrievedThreatListChecksum(System.String)">
            <summary>
                Set Retrieved Threat List's Checksum.
            </summary>
            <param name="value">
                The checksum, formatted as a hexadecimal encoded string, of the lexicographically sorted
                retrieved <see cref="T:Gee.External.Browsing.ThreatList" />.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetThreatsToAdd(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Set Threats to Add.
            </summary>
            <param name="value">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the
                threats associated with the retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and should be added to the locally
                stored copy of the threat list. An empty collection indicates there are no threats to add.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> contains a value that is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetThreatsToRemove(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Set Threats to Remove.
            </summary>
            <param name="value">
                A collection of zero-based indices identifying the threats associated with the lexicographically
                sorted retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> and should be removed from the locally stored copy of the
                threat list. An empty collection indicates there are no threats to remove. 
            </param>
            <returns>
                This threat list update result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> contains a value that is less than <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Clients.ThreatListUpdateResultBuilder.SetUpdateType(Gee.External.Browsing.Clients.ThreatListUpdateType)">
            <summary>
                Set Update Type.
            </summary>
            <param name="value">
                An <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateType" /> indicating how the retrieved <see cref="T:Gee.External.Browsing.ThreatList" /> was
                retrieved.
            </param>
            <returns>
                This threat list update result builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatListUpdateType">
            <summary>
                Threat List Update Type.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Unknown">
            <summary>
                Indicates the update type of a <see cref="T:Gee.External.Browsing.ThreatList" /> retrieved from the Google Safe Browsing API
                is unknown.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Full">
            <summary>
                Indicates a <see cref="T:Gee.External.Browsing.ThreatList" /> was retrieved from the Google Safe Browsing API as a full
                update. The locally stored copy of the threat list should be disregarded in its entirety and replaced
                with the retrieved threat list.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatListUpdateType.Partial">
            <summary>
                Indicates a <see cref="T:Gee.External.Browsing.ThreatList" /> was retrieved from the Google Safe Browsing API as a partial
                update. The retrieved threat list will contain threats that should be removed from and threats to add
                to the locally stored copy of the threat list.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Clients.ThreatState">
            <summary>
                Threat State.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatState.Unknown">
            <summary>
                Indicates the state of a threat is unknown.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatState.Expired">
            <summary>
                Indicates a threat is expired and should be retrieved from the Google Safe Browsing API again.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatState.Safe">
            <summary>
                Indicates a threat is safe.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Clients.ThreatState.Unsafe">
            <summary>
                Indicates a threat is unsafe.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase">
            <summary>
                Base Resilient Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase._resiliencyPolicy">
            <summary>
                Resiliency Policy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase._retryAttempts">
            <summary>
                Retry Attempts.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.#ctor(System.Int32)">
            <summary>
                Create a Base Resilient Database.
            </summary>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.Finalize">
            <summary>
                Destroy a Base Resilient Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.ExecuteResiliencyPolicyAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Execute a Resiliency Policy Action.
            </summary>
            <param name="resiliencyPolicyAction">
                An action for the resilience policy to execute.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BaseResilientBrowsingDatabase.ExecuteResiliencyPolicyAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Execute a Resiliency Policy Action.
            </summary>
            <typeparam name="T">
                The return type of <paramref name="resiliencyPolicyAction" />.
            </typeparam>
            <param name="resiliencyPolicyAction">
                An action for the resilience policy to execute.
            </param>
            <returns>
                The return value of <paramref name="resiliencyPolicyAction" />.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
            <summary>
                Browsing Database Exception.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BrowsingDatabaseException.#ctor(System.String)">
            <summary>
                Create a Browsing Database Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.BrowsingDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
                Create a Browsing Database Exception.
            </summary>
            <param name="detailMessage">
                A detail message describing the reason the exception is being thrown.
            </param>
            <param name="innerException">
                An exception that is the cause of the exception being thrown.
            </param>
        </member>
        <member name="T:Gee.External.Browsing.Databases.DatabaseLookupResult">
            <summary>
                Database Lookup Result.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResult._sha256Hash">
            <summary>
                SHA256 Hash.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResult._sha256HashPrefix">
            <summary>
                SHA256 Hash Prefix.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResult._threatLists">
            <summary>
                Threat Lists.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.IsDatabaseHit">
            <summary>
                Determine if <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicates a Database Hit.
            </summary>
            <remarks>
                Conveniently determines if the <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicates a database hit; that is
                <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.IsDatabaseMiss">
            <summary>
                Determine if <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicates a Database Miss.
            </summary>
            <remarks>
                Conveniently determines if the <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicates a database miss; that is
                <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Miss" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.IsDatabaseStale">
            <summary>
                Determine if <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicates a Stale Database.
            </summary>
            <remarks>
                Conveniently determines if the <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicates a stale database; that is
                <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Stale" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode">
            <summary>
                Get <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResultCode" />.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResultCode" /> indicating the nature of the
                <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.Sha256Hash">
            <summary>
                Get SHA256 Hash.
            </summary>
            <remarks>
                Represents the full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat
                that was looked up in a local database.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is not equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.Sha256HashPrefix">
            <summary>
                Get SHA256 Hash Prefix.
            </summary>
            <remarks>
                Represents the SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat
                that was looked up in a local database.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is not equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ThreatLists">
            <summary>
                Get Threat Lists.
            </summary>
            <remarks>
                Represents the collection of threat lists the threat identified by <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.Sha256Hash" /> and
                <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.Sha256HashPrefix" /> is associated with if, and only if, <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is equal
                to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Databases.DatabaseLookupResult.ResultCode" /> is not equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.DatabaseHit(System.String,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList})">
            <summary>
                Create a <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicating a Database Hit.
            </summary>
            <param name="sha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a local database.
            </param>
            <param name="sha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a local database.
            </param>
            <param name="threatLists">
                A collection of threat lists the threat identified by <paramref name="sha256Hash" /> and
                <paramref name="sha256HashPrefix" /> is associated with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicating a database hit.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.DatabaseMiss">
            <summary>
                Create a <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicating a Database Miss.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicating a database miss.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.DatabaseStale">
            <summary>
                Create a <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> Indicating a Stale Database.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" /> indicating a stale database.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.#ctor(Gee.External.Browsing.Databases.DatabaseLookupResultCode,System.String,System.String,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatList})">
            <summary>
                Create a Database Lookup Result.
            </summary>
            <param name="resultCode">
                A <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResultCode" /> indicating the nature of the <see cref="T:Gee.External.Browsing.Databases.DatabaseLookupResult" />.
            </param>
            <param name="sha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat that was looked
                up in a local database.
            </param>
            <param name="sha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying the threat that was
                looked up in a local database.
            </param>
            <param name="threatLists">
                A collection of threat lists the threat identified by <paramref name="sha256Hash" /> and
                <paramref name="sha256HashPrefix" /> is associated with if, and only if,
                <paramref name="resultCode" /> is equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />. A null
                reference indicates <paramref name="resultCode" /> is not equal to
                <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sha256Hash" /> is a null reference, or if
                <paramref name="sha256HashPrefix" /> is a null reference, or if <paramref name="resultCode" /> is
                equal to <see cref="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit" /> and <paramref name="threatLists" /> is a null
                reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="sha256Hash" /> is not formatted as a hexadecimal encoded string, or if
                <paramref name="sha256HashPrefix" /> is not formatted as a hexadecimal encoded string.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.Equals(System.Object)">
            <summary>
                Determine if This Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if this object is equal to the object. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Databases.DatabaseLookupResult.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Databases.DatabaseLookupResultCode">
            <summary>
                Database Lookup Result Code.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Unknown">
            <summary>
                Indicates an error has occurred looking up a threat in a local database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Hit">
            <summary>
                Indicates a threat has an entry in a local database and should be considered tentatively unsafe until
                it is verified by the Google Safe Browsing API. 
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Miss">
            <summary>
                Indicates a threat does not have an entry in a local database and should be considered safe.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.DatabaseLookupResultCode.Stale">
            <summary>
                Indicates a determination as to whether a threat has an entry in a local database could not be made
                because the local database is expired/out-of-date/stale and needs to be retrieved from the Google Safe
                Browsing API again.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase">
            <summary>
                Abstract Managed Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IManagedBrowsingDatabase.ModifyThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IManagedBrowsingDatabase.StoreThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase">
            <summary>
                Abstract Unmanaged Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase">
            <summary>
                Base JSON Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.DatabaseFileManager">
            <summary>
                Get Database File Manager.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.DatabaseFilePath">
            <summary>
                Get Database File Path.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.#ctor(System.String)">
            <summary>
                Create a Base JSON Database.
            </summary>
            <param name="databaseFilePath">
                An absolute file path to a database file. If the file does not exist, it will be created.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.Finalize">
            <summary>
                Destroy a Base JSON Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.ModifyThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.StoreThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.BaseJsonBrowsingDatabase.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.FileModel">
            <summary>
                File Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.FileModel.ThreatLists">
            <summary>
                Get and Set Threat Lists.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.JsonFileManager">
            <summary>
                JSON File Manager.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.JsonFileManager._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.JsonFileManager._fileLock">
            <summary>
                File Lock.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.JsonFileManager._filePath">
            <summary>
                File Path.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.#ctor(System.String)">
            <summary>
                Create a JSON File Manager.
            </summary>
            <param name="filePath">
                An absolute file path to a file.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="filePath" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.LockFile">
            <summary>
                Lock File.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.Read">
            <summary>
                Read File.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Databases.Json.FileModel" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if the file could not be read.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.UnlockFile">
            <summary>
                Unlock File.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.JsonFileManager.Write(Gee.External.Browsing.Databases.Json.FileModel)">
            <summary>
                Write to File.
            </summary>
            <param name="fileModel">
                A <see cref="T:Gee.External.Browsing.Databases.Json.FileModel" />.
            </param>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if the file could not be written.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="fileModel" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase">
            <summary>
                Managed JSON Browsing Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase.SyncInterval">
            <summary>
                Synchronization Interval.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase._syncTask">
            <summary>
                Synchronization Task.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase._syncTaskCancellationTokenSource">
            <summary>
                Synchronization Task Cancellation Token Source.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase.#cctor">
            <summary>
                Create a Managed JSON Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase.#ctor(System.String)">
            <summary>
                Create a Managed JSON Database.
            </summary>
            <param name="databaseFilePath">
                An absolute file path to the database file. If the file does not exist, it will be created.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase.SyncDatabaseFileAsync">
            <summary>
                Synchronize Database File Asynchronously.
            </summary>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.ThreatListModel">
            <summary>
                Threat List Model.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.PlatformType">
            <summary>
                Get and Set Threat List's Platform Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.RetrieveDate">
            <summary>
                Get and Set Threat List's Retrieve Date.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.State">
            <summary>
                Get and Set Threat List's State.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.ThreatEntryType">
            <summary>
                Get and Set Threat List's Threat Entry Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.ThreatSha256HashPrefixes">
            <summary>
                Get and Set Threat SHA256 Hash Prefixes.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.ThreatType">
            <summary>
                Get and Set Threat List's Threat Type.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Databases.Json.ThreatListModel.WaitToDate">
            <summary>
                Get and Set Threat List's Wait to Date.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase">
            <summary>
                Unmanaged JSON Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase.SyncInterval">
            <summary>
                Synchronization Interval.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase._syncTask">
            <summary>
                Synchronization Task.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase._syncTaskCancellationTokenSource">
            <summary>
                Synchronization Task Cancellation Token Source.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase.#cctor">
            <summary>
                Create an Unmanaged JSON Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase.#ctor(System.String)">
            <summary>
                Create an Unmanaged JSON Database.
            </summary>
            <param name="databaseFilePath">
                An absolute file path to the database file. If the file does not exist, it will be created.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase.SyncDatabaseFileAsync">
            <summary>
                Synchronize Database File Asynchronously.
            </summary>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseExtension">
            <summary>
                Managed Database Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseExtension.ModifyThreatListAsync(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />.
            </param>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseExtension.StoreThreatListAsync(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />.
            </param>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatList" /> is a null
                reference, or if <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy">
            <summary>
                Managed Database Proxy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy._ownDatabase">
            <summary>
                Own Database Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)">
            <summary>
                Create a Managed Database Proxy.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The managed database proxy takes ownership of
                <paramref name="database" /> and will dispose it when the managed database proxy itself is disposed. If
                you reference or dispose <paramref name="database" /> after you create the managed database proxy, the
                behavior of the managed database proxy and <paramref name="database" /> is undefined.
            </param>
            <returns>
                A managed database proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Boolean)">
            <summary>
                Create a Managed Database Proxy.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the managed database proxy takes ownership of
                <paramref name="database" /> and disposes it when the managed database proxy itself is disposed. If the
                managed database proxy takes ownership of <paramref name="database" /> and you reference or dispose
                <paramref name="database" /> after you create the managed database proxy, the behavior of the managed
                database proxy and <paramref name="database" /> is undefined.
            </param>
            <returns>
                A managed database proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.#ctor(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)">
            <summary>
                Create a Managed Database Proxy.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The managed database proxy takes ownership of
                <paramref name="database" /> and will dispose it when the managed database proxy itself is disposed. If
                you reference or dispose <paramref name="database" /> after you create the managed database proxy, the
                behavior of the managed database proxy and <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.#ctor(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Boolean)">
            <summary>
                Create a Managed Database Proxy.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the managed database proxy takes ownership of
                <paramref name="database" /> and disposes it when the managed database proxy itself is disposed. If the
                managed database proxy takes ownership of <paramref name="database" /> and you reference or dispose
                <paramref name="database" /> after you create the managed database proxy, the behavior of the managed
                database proxy and <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.ModifyThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.StoreThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ManagedBrowsingDatabaseProxy.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.MemoryBrowsingDatabase">
            <summary>
                Memory Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.MemoryBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.MemoryBrowsingDatabase._lock">
            <summary>
                Lock.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.MemoryBrowsingDatabase._threatLists">
            <summary>
                Threat Lists.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.MemoryBrowsingDatabase._threats">
            <summary>
                Threat Entries.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.#ctor">
            <summary>
                Create a Memory Database.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
                Initialize Database Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.ModifyThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.StoreThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.MemoryBrowsingDatabase.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase">
            <summary>
                Resilient Managed Database.
            </summary>
            <remarks>
                <para>
                    Represents a resilient managed database that automatically retries failed operations performed on a
                    <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />. The number of retry attempts is either caller or
                    implementation specific if you do not specify a value. Between each retry attempt, the resilient
                    managed database will pause for an implementation specific interval. If all retry attempts are
                    exhausted and the attempted operation never succeeds, the exception the failed operation threw will be
                    propagated up to you.
                </para>
                <para>
                    If you specify a number of retry attempts when you create a resilient managed database, be practical
                    with the value you specify. The resilient unmanaged database will pause for an implementation specific
                    interval between each retry attempt, which effectively means if an attempted operation always fails,
                    the exception it threw will not be propagated up to you until all the retry attempts are exhausted. If
                    you specify a very high number of retry attempts, this could have self inflicted performance
                    implications.
                </para>
                <para>
                    When you create a resilient managed database, you can specify whether or not it takes ownership of the
                    managed database you want to proxy to and dispose it when the resilient managed database itself is
                    disposed. The recommended behavior is that you allow the resilient managed database to take ownership
                    of the managed database you want to proxy to but take note that if you reference or dispose the managed
                    database you want to proxy to after you create the resilient managed database, the behavior of the
                    resilient managed database and managed database you want to proxy to is undefined.
                </para>
                <para>
                    Since a resilient managed database itself implements <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />, it is
                    technically possible to create a new resilient managed database for an existing resilient managed
                    database, though the reasons for doing so, in most cases, are unjustified. To avoid doing do, consider
                    creating a resilient managed database using <see cref="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)" />, or one of
                    its overloads, instead of one of the constructor overloads.
                    <see cref="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)" /> will conveniently create a resilient managed database
                    if, and only if, the managed database you want to proxy to itself is not a resilient managed database.
                </para>
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase._ownDatabase">
            <summary>
                Own Database Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The resilient managed database takes ownership
                of <paramref name="database" /> and will dispose it when the resilient managed database itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the resilient
                managed database, the behavior of the resilient managed database and <paramref name="database" /> is
                undefined.
            </param>
            <returns>
                A resilient managed database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Int32)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The resilient managed database takes ownership
                of <paramref name="database" /> and will dispose it when the resilient managed database itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the resilient
                managed database, the behavior of the resilient managed database and <paramref name="database" /> is
                undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <returns>
                A resilient managed database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the resilient managed database takes ownership of
                <paramref name="database" /> and disposes it when the resilient managed database itself is disposed. If
                the resilient managed database takes ownership of <paramref name="database" /> and you reference or
                dispose <paramref name="database" /> after you create the resilient managed database, the behavior of
                the resilient managed database and <paramref name="database" /> is undefined.
            </param>
            <returns>
                A resilient managed database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IManagedBrowsingDatabase)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The resilient managed database takes ownership
                of <paramref name="database" /> and will dispose it when the resilient managed database itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the resilient
                managed database, the behavior of the resilient managed database and <paramref name="database" /> is
                undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Int32)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to. The resilient managed database takes ownership
                of <paramref name="database" /> and will dispose it when the resilient managed database itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the resilient
                managed database, the behavior of the resilient managed database and <paramref name="database" /> is
                undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Managed Database.
            </summary>
            <param name="database">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the resilient managed database takes ownership of
                <paramref name="database" /> and disposes it when the resilient managed database itself is disposed. If
                the resilient managed database takes ownership of <paramref name="database" /> and you reference or
                dispose <paramref name="database" /> after you create the resilient managed database, the behavior of
                the resilient managed database and <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.ModifyThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Modify a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to modify.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="threatIndices">
                A collection of zero-based indices identifying the threats associated with the lexicographically sorted
                <paramref name="threatList" /> and should be removed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference, or if
                <paramref name="threatIndices" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.StoreThreatListAsync(Gee.External.Browsing.ThreatList,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Store a Threat List Asynchronously.
            </summary>
            <param name="threatList">
                A <see cref="T:Gee.External.Browsing.ThreatList" /> to store.
            </param>
            <param name="threatSha256HashPrefixes">
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                associated with <paramref name="threatList" /> and should be stored.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A task representing the asynchronous operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatList" /> is a null reference, or if
                <paramref name="threatSha256HashPrefixes" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientManagedBrowsingDatabase.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase">
            <summary>
                Resilient Unmanaged Database.
            </summary>
            <remarks>
                <para>
                    Represents a resilient unmanaged database that automatically retries failed operations performed on an
                    <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />. The number of retry attempts is either caller or
                    implementation specific if you do not specify a value. Between each retry attempt, the resilient
                    unmanaged database will pause for an implementation specific interval. If all retry attempts are
                    exhausted and the attempted operation never succeeds, the exception the failed operation threw will be
                    propagated up to you.
                </para>
                <para>
                    If you specify a number of retry attempts when you create a resilient unmanaged database, be practical
                    with the value you specify. The resilient unmanaged database will pause for an implementation specific
                    interval between each retry attempt, which effectively means if an attempted operation always fails,
                    the exception it threw will not be propagated up to you until all the retry attempts are exhausted. If
                    you specify a very high number of retry attempts, this could have self inflicted performance
                    implications.
                </para>
                <para>
                    When you create a resilient unmanaged database, you can specify whether or not it takes ownership of
                    the unmanaged database you want to proxy to and dispose it when the resilient unmanaged database
                    itself is disposed. The recommended behavior is that you allow the resilient unmanaged database to take
                    ownership of the unmanaged database you want to proxy to but take note that if you reference or dispose
                    the unmanaged database you want to proxy to after you create the resilient unmanaged database, the
                    behavior of the resilient unmanaged database and unmanaged database you want to proxy to is undefined.
                </para>
                <para>
                    Since a resilient unmanaged database itself implements <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />, it is
                    technically possible to create a new resilient unmanaged database for an existing resilient unmanaged
                    database, though the reasons for doing so, in most cases, are unjustified. To avoid doing do, consider
                    creating a resilient unmanaged database using <see cref="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)" />, or one
                    of its overloads, instead one of the constructor overloads.
                    <see cref="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)" /> will conveniently create a resilient unmanaged
                    database if, and only if, the unmanaged database you want to proxy to itself is not a resilient
                    unmanaged database.
                </para>
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase._ownDatabase">
            <summary>
                Own Database Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The resilient unmanaged database takes
                ownership of <paramref name="database" /> and will dispose it when the resilient unmanaged database
                itself is disposed. If you reference or dispose <paramref name="database" /> after you create the
                resilient unmanaged database, the behavior of the resilient unmanaged database and
                <paramref name="database" /> is undefined.
            </param>
            <returns>
                A resilient unmanaged database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Int32)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The resilient unmanaged database takes
                ownership of <paramref name="database" /> and will dispose it when the resilient unmanaged database
                itself is disposed. If you reference or dispose <paramref name="database" /> after you create the
                resilient unmanaged database, the behavior of the resilient unmanaged database and
                <paramref name="database" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <returns>
                A resilient unmanaged database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the resilient unmanaged database takes ownership of
                <paramref name="database" /> and disposes it when the resilient unmanaged database itself is disposed.
                If the resilient unmanaged database takes ownership of <paramref name="database" /> and you reference
                or dispose <paramref name="database" /> after you create the resilient unmanaged database, the behavior
                of the resilient unmanaged database and <paramref name="database" /> is undefined.
            </param>
            <returns>
                A resilient unmanaged database.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The resilient unmanaged database takes
                ownership of <paramref name="database" /> and will dispose it when the resilient unmanaged database
                itself is disposed. If you reference or dispose <paramref name="database" /> after you create the
                resilient unmanaged database, the behavior of the resilient unmanaged database and
                <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Int32)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The resilient unmanaged database takes
                ownership of <paramref name="database" /> and will dispose it when the resilient unmanaged database
                itself is disposed. If you reference or dispose <paramref name="database" /> after you create the
                resilient unmanaged database, the behavior of the resilient unmanaged database and
                <paramref name="database" /> is undefined.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.#ctor(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Int32,System.Boolean)">
            <summary>
                Create a Resilient Unmanaged Database.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="retryAttempts">
                The number of attempts a failed operation should be retried.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the resilient unmanaged database takes ownership of
                <paramref name="database" /> and disposes it when the resilient unmanaged database itself is disposed.
                If the resilient unmanaged database takes ownership of <paramref name="database" /> and you reference
                or dispose <paramref name="database" /> after you create the resilient unmanaged database, the behavior
                of the resilient unmanaged database and <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="retryAttempts" /> is less than or equal to <c>0</c>.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.Dispose(System.Boolean)">
            <summary>
                Dispose Object.
            </summary>
            <param name="disposing">
                A boolean true if the object is being disposed by a caller. A boolean false if the object is being
                disposed by a finalizer.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.ResilientUnmanagedBrowsingDatabase.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension">
            <summary>
                Unmanaged Database Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.ComputeThreatListChecksumAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Compute a Threat List's Checksum Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> whose checksum should
                be computed.
            </param>
            <returns>
                The checksum, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatListDescriptor" />
                is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.ComputeThreatListChecksumAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Compute a Threat List's Checksum Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> whose checksum should
                be computed.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The checksum, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatListDescriptor" />
                is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.FindThreatListsAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.String)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if
                <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.GetThreatListAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatListDescriptor" />
                is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.GetThreatListsAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.GetThreatListsAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatListDescriptor})">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="this">
                A browsing database.
            </param>
            <param name="threatListDescriptors">
                A collection of threat list descriptors identifying the threat lists to retrieve.
            </param>
            <returns>
                A collection of threat lists identified by the threat list descriptors contained in
                <paramref name="threatListDescriptors" />. The length of the collection is not guaranteed to equal the
                length of <paramref name="threatListDescriptors" />. More specifically, the collection will only
                contain threat lists that can be identified by a threat list descriptor contained in
                <paramref name="threatListDescriptors" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.GetThreatsAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="this">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="threatListDescriptor" />
                is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseExtension.LookupAsync(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.Url)">
            <summary>
                Lookup a URL Asynchronously.
            </summary>
            <param name="this">
                A database.
            </param>
            <param name="url">
                A URL to lookup.
            </param>
            <returns>
                A database lookup result indicating the nature of lookup operation.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="this" /> is a null reference, or if <paramref name="url" /> is a null
                reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy">
            <summary>
                Unmanaged Database Proxy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy._ownDatabase">
            <summary>
                Own Database Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)">
            <summary>
                Create an Unmanaged Database Proxy.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The unmanaged database proxy takes ownership
                of <paramref name="database" /> and will dispose it when the unmanaged database proxy itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the unmanaged
                database proxy, the behavior of the unmanaged database proxy and <paramref name="database" /> is
                undefined.
            </param>
            <returns>
                An unmanaged database proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.Create(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Boolean)">
            <summary>
                Create an Unmanaged Database Proxy.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the unmanaged database proxy takes ownership of
                <paramref name="database" /> and disposes it when the unmanaged database proxy itself is disposed. If
                the unmanaged database proxy takes ownership of <paramref name="database" /> and you reference or
                dispose <paramref name="database" /> after you create the unmanaged database proxy, the behavior of the
                unmanaged database proxy and <paramref name="database" /> is undefined.
            </param>
            <returns>
                An unmanaged database proxy.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.#ctor(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase)">
            <summary>
                Create an Unmanaged Database Proxy.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to. The unmanaged database proxy takes ownership
                of <paramref name="database" /> and will dispose it when the unmanaged database proxy itself is
                disposed. If you reference or dispose <paramref name="database" /> after you create the unmanaged
                database proxy, the behavior of the unmanaged database proxy and <paramref name="database" /> is
                undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.#ctor(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Boolean)">
            <summary>
                Create an Unmanaged Database Proxy.
            </summary>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to proxy to.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the unmanaged database proxy takes ownership of
                <paramref name="database" /> and disposes it when the unmanaged database proxy itself is disposed. If
                the unmanaged database proxy takes ownership of <paramref name="database" /> and you reference or
                dispose <paramref name="database" /> after you create the unmanaged database proxy, the behavior of the
                unmanaged database proxy and <paramref name="database" /> is undefined.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="database" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.FindThreatListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Find Threat Lists Asynchronously.
            </summary>
            <param name="threatSha256HashPrefix">
                A SHA256 hash prefix, formatted as a hexadecimal encoded string, identifying a threat associated with
                the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" /> the threat identified by
                <paramref name="threatSha256HashPrefix" /> is associated with. An empty collection indicates no threat
                lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatSha256HashPrefix" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.GetThreatListAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get a Threat List Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                The <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" />. A null reference
                indicates a threat list could not be found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.GetThreatListsAsync(System.Threading.CancellationToken)">
            <summary>
                Get Threat Lists Asynchronously.
            </summary>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of <see cref="T:Gee.External.Browsing.ThreatList" />. An empty collection indicates no threat lists were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.GetThreatsAsync(Gee.External.Browsing.ThreatListDescriptor,System.Threading.CancellationToken)">
            <summary>
                Get Threats Asynchronously.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threats that should
                be retrieved are associated with.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A collection of SHA256 hash prefixes, formatted as hexadecimal encoded strings, identifying the threats
                that are associated with the <see cref="T:Gee.External.Browsing.ThreatList" /> identified by
                <paramref name="threatListDescriptor" />. An empty collection indicates no threats were found.
            </returns>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Databases.UnmanagedBrowsingDatabaseProxy.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.PlatformType">
            <summary>
                Platform Type.
            </summary>
            <remarks>
                Indicates the platform a threat targets. A <see cref="T:Gee.External.Browsing.PlatformType" /> is also used as one of the 
                identifiers identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> together with <see cref="T:Gee.External.Browsing.ThreatEntryType" /> and
                <see cref="T:Gee.External.Browsing.ThreatType" />.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Unknown">
            <summary>
                Indicates a threat targets an unknown platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.All">
            <summary>
                Indicates a threat targets all platforms without explicitly indicating which one.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Android">
            <summary>
                Indicates a threat targets the Android platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Any">
            <summary>
                Indicates a threat targets at least one platform without explicitly indicating which one.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Chrome">
            <summary>
                Indicates a threat targets the Chrome platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Ios">
            <summary>
                Indicates a threat targets the iOS platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Linux">
            <summary>
                Indicates a threat targets the Linux platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.MacOs">
            <summary>
                Indicates a threat targets the MacOS platform.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.PlatformType.Windows">
            <summary>
                Indicates a threat targets the Windows platform.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.Services.BaseBrowsingService">
            <summary>
                Base Service.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingService.#ctor">
            <summary>
                Create a Base Service.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingService.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingService.LookupAsync(Gee.External.Browsing.Url,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingService.LookupAsync(Gee.External.Browsing.Cache.IBrowsingCache,Gee.External.Browsing.Clients.IBrowsingClient,Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,Gee.External.Browsing.Url,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="cache">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="client">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="database">
                An <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" />.
            </param>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="cache" /> is disposed, or if <paramref name="client" /> is disposed, or if
                <paramref name="database" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1">
            <summary>
                Base Service Builder.
            </summary>
            <typeparam name="T">
                The service builder's type.
            </typeparam>
        </member>
        <member name="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.Cache">
            <summary>
                Get and Set Cache.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" /> to cache a looked up <see cref="T:Gee.External.Browsing.Url" /> in.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.Client">
            <summary>
                Get and Set Client.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to retrieve the collection of <see cref="T:Gee.External.Browsing.ThreatList" />
                to store locally with.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.OwnCache">
            <summary>
                Get and Set Own Cache Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.Cache" /> and disposes it when the service itself is disposed. If the
                service takes ownership of the cache and you reference or dispose the cache after you create the
                service, the behavior of the service and the cache is undefined.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.OwnClient">
            <summary>
                Get and Set Own Client Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.Client" /> and disposes it when the service itself is disposed. If the
                service takes ownership of the client and you reference or dispose the client after you create the
                service, the behavior of the client and the client is undefined.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.#ctor">
            <summary>
                Create a Base Service Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.SetCache(Gee.External.Browsing.Cache.IBrowsingCache,System.Boolean)">
            <summary>
                Set Cache.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Cache.IBrowsingCache" />.
            </param>
            <param name="ownCache">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes ownership of the
                cache and disposes it when the service itself is disposed. If the service takes ownership of the cache
                and you reference or dispose the cache after you create the service, the behavior of the service and
                the cache is undefined.
            </param>
            <returns>
                This service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.SetClient(Gee.External.Browsing.Clients.IBrowsingClient,System.Boolean)">
            <summary>
                Set Client.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="ownClient">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes ownership of the
                client and disposes it when the service itself is disposed. If the service takes ownership of the
                client and you reference or dispose the client after you create the service, the behavior of the
                service and the client is undefined.
            </param>
            <returns>
                This service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.UseHttpClient(System.String)">
            <summary>
                Use a HTTP Client.
            </summary>
            <param name="apiKey">
                A Google Safe Browsing API key to authenticate to the Google Safe Browsing API with.
            </param>
            <remarks>
                Use an <see cref="T:Gee.External.Browsing.Clients.Http.HttpBrowsingClient" /> to communicate with the Google Safe Browsing API. The
                <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes ownership of the HTTP client and will dispose it when the
                service itself is disposed.
            </remarks>
            <returns>
                This service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="apiKey" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BaseBrowsingServiceBuilder`1.UseMemoryCache">
            <summary>
                Use a Memory Cache.
            </summary>
            <remarks>
                Use a <see cref="T:Gee.External.Browsing.Cache.MemoryBrowsingCache" /> to cache a threat that is looked up on the Google Safe
                Browsing API. The <see cref="T:Gee.External.Browsing.Services.BaseBrowsingService" /> takes ownership off the memory cache and will
                dispose it when the service itself is disposed.
            </remarks>
            <returns>
                This service builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Services.BrowsingDatabaseManager">
            <summary>
                Database Manager.
            </summary>
            <remarks>
                <para>
                    Represents a database manager that setups a database and periodically synchronizes it with threat lists
                    updates retrieved from the Google Safe Browsing API. Once a database manager is created, it will
                    periodically run a synchronization operation on a background thread to retrieve threat list updates
                    from the Google Safe Browsing API, remove stale threat from, and add new threat to a database until it
                    is disposed. Between every synchronization operation, the database manager will pause for a period
                    indicated by the Google Safe Browsing API. If the Google Safe Browsing API does not indicate a period
                    to pause for, an implementation specific period is used. To indicate when a synchronization operation
                    has started and either completed successfully or failed, the database manager raises relevant events
                    you can register event handlers for.
                </para>
                <para>
                    Unless you restrict it to do so otherwise, by default a database manager will retrieve threat list
                    updates for all threat lists made available by the Google Safe Browsing API. When a synchronization
                    operation runs, it will not only synchronize existing threat lists in the database but it will also
                    synchronize new threat lists made available, if any, since the last synchronization operation. While
                    this may have the desired effect of ensuring a database is synchronized with all available threat
                    lists, it will have a significant impact on the amount of time needed to do so as well as on bandwidth,
                    memory, and disk utilization. As a rule of thumb, the more threat lists that need to be synchronized,
                    the longer it will take for a synchronization operation to complete and the more bandwidth, memory, and
                    disk utilization that will be required. If you are not interested in retrieving threat list updates for
                    all available threat lists, you are encouraged to restrict a database manager to the specific threat
                    lists you are interested in to minimize resource utilization.
                </para>
            </remarks>
        </member>
        <member name="E:Gee.External.Browsing.Services.BrowsingDatabaseManager.ThreatListSynchronizationCompleted">
            <summary>
                Threat List Synchronization Completed Event.
            </summary>
        </member>
        <member name="E:Gee.External.Browsing.Services.BrowsingDatabaseManager.ThreatListSynchronizationFailed">
            <summary>
                Threat List Synchronization Failed Event.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._client">
            <summary>
                Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._synchronizationTask">
            <summary>
                Synchronization Task.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._synchronizationTaskCancellationTokenSource">
            <summary>
                Synchronization Task Cancellation Token Source.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.BrowsingDatabaseManager._updateConstraints">
            <summary>
                Update Constraints.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.Build">
            <summary>
                Build a Database Synchronizer.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder" /> to build a database synchronizer with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.#ctor(Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder)">
            <summary>
                Create a Database Manager.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder" /> to initialize the database manager with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.OnThreatListSynchronizationCompleted(Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs)">
            <summary>
                Invoke Threat List Synchronization Completed Event.
            </summary>
            <param name="eventArgs">
                A threat list synchronization completed event arguments indicating the nature of the event.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.OnThreatListSynchronizationFailed(Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs)">
            <summary>
                Invoke Threat List Synchronization Failed Event.
            </summary>
            <param name="eventArgs">
                A threat list synchronization failed event arguments indicating the nature of the event.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManager.SynchronizeDatabaseAsync">
            <summary>
                Synchronize Database Asynchronously.
            </summary>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder">
            <summary>
                Database Manager Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.Client">
            <summary>
                Get and Set Client.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" /> to retrieve the collection of <see cref="T:Gee.External.Browsing.ThreatList" />
                to store locally with.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.Database">
            <summary>
                Get and Set Database.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to store the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> in.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.OwnClient">
            <summary>
                Get and Set Own Client Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.Client" /> and disposes it when the database manager itself is disposed. If
                the database manager takes ownership of the client and you reference or dispose the client after you
                create the database manager, the behavior of the database manager and the client is undefined.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.OwnDatabase">
            <summary>
                Get and Set Own Database Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.Database" /> and disposes it when the database manager itself is disposed.
                If the database manager takes ownership of the database and you reference or dispose the database after
                you create the database manager, the behavior of the database manager and the database is undefined.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.UpdateConstraints">
            <summary>
                Get and Set Update Constraints.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve and optionally the
                <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when retrieving them. An empty collection indicates
                all threat lists available by the Google Safe Browsing API should be retrieved.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.#ctor">
            <summary>
                Create a Database Manager Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.Build">
            <summary>
                Build a Database Manager.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <returns>
                This database synchronizer builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor,System.Func{Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraintsAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the
                <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" /> is retrieved.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="updateConstraintsAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> identified
                by <paramref name="threatListDescriptor" /> is retrieved.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="updateConstraints" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <returns>
                This database manager builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,System.Func{Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraintsAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the
                <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatType" />,
                <paramref name="platformType" />, and <paramref name="threatEntryType" /> is retrieved.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="updateConstraintsAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> identified
                by <paramref name="threatType" />, <paramref name="platformType" />, and
                <paramref name="threatEntryType" /> is retrieved.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="updateConstraints" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.SetClient(Gee.External.Browsing.Clients.IBrowsingClient,System.Boolean)">
            <summary>
                Set Client.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Clients.IBrowsingClient" />.
            </param>
            <param name="ownClient">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes ownership of
                the client and disposes it when the database manager itself is disposed. If the database manager takes
                ownership of the client and you reference or dispose the client after you create the database manager,
                the behavior of the database manager and the client is undefined.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.SetDatabase(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Boolean)">
            <summary>
                Set Database.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" />.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes ownership of
                the database and disposes it when the database manager itself is disposed. If the database manager
                takes ownership of the database and you reference or dispose the database after you create the database
                manager, the behavior of the database manager and the database is undefined.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.SetUpdateConstraints(System.Collections.Generic.IDictionary{Gee.External.Browsing.ThreatListDescriptor,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Set Update Constraints.
            </summary>
            <param name="value"></param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.UseHttpClient(System.String)">
            <summary>
                Use an HTTP Client.
            </summary>
            <remarks>
                Use an <see cref="T:Gee.External.Browsing.Clients.Http.HttpBrowsingClient" /> to communicate with the Google Safe Browsing API. The
                <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes ownership of the HTTP client and will dispose it when the
                database manager itself is disposed.
            </remarks>
            <param name="apiKey">
                A Google Safe Browsing API key to authenticate to the Google Safe Browsing API with.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="apiKey" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingDatabaseManagerBuilder.UseJsonDatabase(System.String)">
            <summary>
                Use a JSON Database.
            </summary>
            <remarks>
                Use a <see cref="T:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase"/> to store threat list updates retrieved from the Google
                Safe Browsing API. The <see cref="T:Gee.External.Browsing.Services.BrowsingDatabaseManager" /> takes ownership of the JSON database and
                will dispose it when the database manager itself is disposed.
            </remarks>
            <param name="databaseFilePath">
                An absolute file path to the database file. If the file does not exist, it will be created.
            </param>
            <returns>
                This database manager builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.BrowsingServiceExtension">
            <summary>
                Browsing Service Extension.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingServiceExtension.LookupAsync(Gee.External.Browsing.Services.IBrowsingService,System.String)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Services.IBrowsingService" />.
            </param>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingServiceExtension.LookupAsync(Gee.External.Browsing.Services.IBrowsingService,System.String,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Services.IBrowsingService" />.
            </param>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.BrowsingServiceExtension.LookupAsync(Gee.External.Browsing.Services.IBrowsingService,Gee.External.Browsing.Url)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="this">
                A <see cref="T:Gee.External.Browsing.Services.IBrowsingService" />.
            </param>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if <paramref name="this" /> is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.IBrowsingService">
            <summary>
                Abstract Service.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.IBrowsingService.LookupAsync(Gee.External.Browsing.Url,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.ManagedBrowsingService">
            <summary>
                Managed Service.
            </summary>
        </member>
        <member name="E:Gee.External.Browsing.Services.ManagedBrowsingService.ThreatListSynchronizationCompleted">
            <summary>
                Threat List Synchronization Completed Event.
            </summary>
        </member>
        <member name="E:Gee.External.Browsing.Services.ManagedBrowsingService.ThreatListSynchronizationFailed">
            <summary>
                Threat List Synchronization Failed Event.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._cache">
            <summary>
                Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._client">
            <summary>
                Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._databaseManager">
            <summary>
                Database Manager.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._resiliencyPolicy">
            <summary>
                Resiliency Policy.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.ManagedBrowsingService._retryAttempts">
            <summary>
                Retry Attempts.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingService.Build">
            <summary>
                Build a Managed Service.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder" /> to build a managed service with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingService.#ctor(Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder)">
            <summary>
                Create a Managed Service.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder" /> to initialize the managed service with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingService.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingService.LookupAsync(Gee.External.Browsing.Url,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingService.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder">
            <summary>
                Managed Service Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.Database">
            <summary>
                Get and Set Database.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to store the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> in.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.OwnDatabase">
            <summary>
                Get and Set Own Database Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingService" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.Database" /> and disposes it when the managed service itself is disposed.
                If the managed service takes ownership of the database and you reference or dispose the database after
                you create the managed service, the behavior of the managed service and the database is undefined.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.UpdateConstraints">
            <summary>
                Get and Set Update Constraints.
            </summary>
            <remarks>
                Represents the collection of <see cref="T:Gee.External.Browsing.ThreatList" /> to retrieve and optionally the
                <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when retrieving them. An empty collection indicates
                all threat lists available by the Google Safe Browsing API should be retrieved.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.#ctor">
            <summary>
                Create a Managed Service Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.Build">
            <summary>
                Build a Managed Service.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingService" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor,System.Func{Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraintsAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the
                <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatListDescriptor" /> is retrieved.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="updateConstraintsAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatListDescriptor,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> identified
                by <paramref name="threatListDescriptor" /> is retrieved.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="updateConstraints" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <returns>
                This managed service builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,System.Func{Gee.External.Browsing.Clients.ThreatListUpdateConstraintsBuilder,Gee.External.Browsing.Clients.ThreatListUpdateConstraints})">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraintsAction">
                An action to create the <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the
                <see cref="T:Gee.External.Browsing.ThreatList" /> identified by <paramref name="threatType" />,
                <paramref name="platformType" />, and <paramref name="threatEntryType" /> is retrieved.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="updateConstraintsAction" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.RestrictUpdatesTo(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType,Gee.External.Browsing.Clients.ThreatListUpdateConstraints)">
            <summary>
                Restrict Updates.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> to restrict updates to.
            </param>
            <param name="updateConstraints">
                The <see cref="T:Gee.External.Browsing.Clients.ThreatListUpdateConstraints" /> to apply when the <see cref="T:Gee.External.Browsing.ThreatList" /> identified
                by <paramref name="threatType" />, <paramref name="platformType" />, and
                <paramref name="threatEntryType" /> is retrieved.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="updateConstraints" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.SetDatabase(Gee.External.Browsing.Databases.IManagedBrowsingDatabase,System.Boolean)">
            <summary>
                Set Database.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to store the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> in.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingService" /> takes ownership of
                the database and disposes it when the managed service itself is disposed. If the managed service takes
                ownership of the database and you reference or dispose the database after you create the managed
                service, the behavior of the managed service and the database is undefined.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.UseJsonDatabase(System.String)">
            <summary>
                Use a JSON Database.
            </summary>
            <remarks>
                Use a <see cref="T:Gee.External.Browsing.Databases.Json.ManagedJsonBrowsingDatabase"/> to store threat list updates retrieved from the Google
                Safe Browsing API. The <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingService" /> takes ownership of the JSON database and
                will dispose it when the managed service itself is disposed.
            </remarks>
            <param name="databaseFilePath">
                An absolute file path to the database file. If the file does not exist, it will be created.
            </param>
            <returns>
                This managed service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.ManagedBrowsingServiceBuilder.UseMemoryDatabase">
            <summary>
                Use a Memory Database.
            </summary>
            <remarks>
                Use a <see cref="T:Gee.External.Browsing.Databases.MemoryBrowsingDatabase"/> to store threat list updates retrieved from the Google Safe
                Browsing API. The <see cref="T:Gee.External.Browsing.Services.ManagedBrowsingService" /> takes ownership of the memory database and will
                dispose it when the managed service itself is disposed.
            </remarks>
            <returns>
                This managed service builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs">
            <summary>
                Threat List Synchronization Completed Event Arguments.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.SynchronizationCompletionDate">
            <summary>
                Get Synchronization Completion Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the synchronization operation for the
                <see cref="P:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.SynchronizedThreatList" /> completed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.SynchronizationStartDate">
            <summary>
                Get Synchronization Start Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the synchronization operation for the
                <see cref="P:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.SynchronizedThreatList" /> started.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.SynchronizedThreatList">
            <summary>
                Get Synchronized Threat List.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatList" /> that was synchronized successfully.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.ThreatListSynchronizationCompletedEventArgs.#ctor(Gee.External.Browsing.ThreatList,System.DateTime,System.DateTime)">
            <summary>
                Create a Threat List Synchronization Completed Event Arguments.
            </summary>
            <param name="synchronizedThreatList">
                The <see cref="T:Gee.External.Browsing.ThreatList" /> that was synchronized successfully.
            </param>
            <param name="synchronizationStartDate">
                The date, in Coordinated Universal Time (UTC), the synchronization operation for
                <paramref name="synchronizedThreatList" /> started. If the date is not expressed in UTC, it is
                converted to it.
            </param>
            <param name="synchronizationCompletionDate">
                The date, in Coordinated Universal Time (UTC), the synchronization operation for
                <paramref name="synchronizedThreatList" /> completed. If the date is not expressed in UTC, it is
                converted to it.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="synchronizedThreatList" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs">
            <summary>
                Threat List Synchronization Failed Event Arguments.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SkippedThreatList">
            <summary>
                Get Skipped Threat List.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatList" /> that failed to synchronize and was skipped.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SynchronizationException">
            <summary>
                Get Synchronization Exception.
            </summary>
            <remarks>
                Represents the exception that was thrown when the synchronization operation for
                <see cref="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SkippedThreatList" /> failed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SynchronizationFailureDate">
            <summary>
                Get Synchronization Failure Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the synchronization operation
                <see cref="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SkippedThreatList" /> failed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SynchronizationStartDate">
            <summary>
                Get Synchronization Start Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the synchronization operation
                <see cref="P:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.SkippedThreatList" /> started.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.ThreatListSynchronizationFailedEventArgs.#ctor(Gee.External.Browsing.ThreatList,System.DateTime,System.DateTime,System.Exception)">
            <summary>
                Create a Threat List Synchronization Failed Event Arguments.
            </summary>
            <param name="skippedThreatList">
                The <see cref="T:Gee.External.Browsing.ThreatList" /> that failed to synchronize and was skipped.
            </param>
            <param name="synchronizationStartDate">
                The date, in Coordinated Universal Time (UTC), the synchronization operation for
                <paramref name="skippedThreatList" /> started. If the date is not expressed in UTC, it is converted to
                it.
            </param>
            <param name="synchronizationFailureDate">
                The date, in Coordinated Universal Time (UTC), the synchronization operation for
                <paramref name="skippedThreatList" /> failed. If the date is not expressed in UTC, it is converted to
                it.
            </param>
            <param name="synchronizationException">
                The exception that was thrown when the synchronization operation for
                <paramref name="skippedThreatList"/> failed. 
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="skippedThreatList" /> is a null reference, or if
                <paramref name="synchronizationException" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.UnmanagedBrowsingService">
            <summary>
                Unmanaged Service.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UnmanagedBrowsingService._cache">
            <summary>
                Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UnmanagedBrowsingService._client">
            <summary>
                Client.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UnmanagedBrowsingService._database">
            <summary>
                Database.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UnmanagedBrowsingService._disposed">
            <summary>
                Disposed Flag.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingService.Build">
            <summary>
                Build an Unmanaged Service.
            </summary>
            <returns>
                An <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder" /> to build an unmanaged service with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingService.#ctor(Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder)">
            <summary>
                Create an Unmanaged Service.
            </summary>
            <param name="builder">
                An <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder" /> to initialize the unmanaged service with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingService.Dispose">
            <summary>
                Dispose Object.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingService.LookupAsync(Gee.External.Browsing.Url,System.Threading.CancellationToken)">
            <summary>
                Lookup a URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> to lookup.
            </param>
            <param name="cancellationToken">
                A cancellation token to cancel the asynchronous operation with.
            </param>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> indicating whether <paramref name="url" /> is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </returns>
            <exception cref="T:Gee.External.Browsing.Cache.BrowsingCacheException">
                Thrown if a caching error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Clients.BrowsingClientException">
                Thrown if an error communicating with the Google Safe Browsing API occurs. If you're not interested
                in handling this exception, catch <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:Gee.External.Browsing.Databases.BrowsingDatabaseException">
                Thrown if a database error occurs. If you're not interested in handling this exception, catch
                <see cref="T:Gee.External.Browsing.BrowsingException" /> instead.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="url" /> is a null reference.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
                Thrown if the asynchronous operation is cancelled.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingService.ThrowIfDisposed">
            <summary>
                Throw an Exception if Object is Disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                Thrown if the object is disposed.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder">
            <summary>
                Unmanaged Service Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.Database">
            <summary>
                Get and Set Database.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase" /> to retrieve the collection of stored
                <see cref="T:Gee.External.Browsing.ThreatList" /> from.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.OwnDatabase">
            <summary>
                Get and Set Own Database Flag.
            </summary>
            <remarks>
                Represents a boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingService" /> takes
                ownership of the <see cref="P:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.Database" /> and disposes it when the unmanaged service itself is disposed.
                If the unmanaged service takes ownership of the database and you reference or dispose the database
                after you create the unmanaged service, the behavior of the unmanaged service and the database is
                undefined.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.Build">
            <summary>
                Build an Unmanaged Service.
            </summary>
            <returns>
                An <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingService" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.SetDatabase(Gee.External.Browsing.Databases.IUnmanagedBrowsingDatabase,System.Boolean)">
            <summary>
                Set Database.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.Databases.IManagedBrowsingDatabase" /> to store the collection of retrieved
                <see cref="T:Gee.External.Browsing.ThreatList" /> in.
            </param>
            <param name="ownDatabase">
                A boolean flag indicating whether or not the <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingService" /> takes ownership of
                the database and disposes it when the unmanaged service itself is disposed. If the unmanaged service
                takes ownership of the database and you reference or dispose the database after you create the
                unmanaged service, the behavior of the unmanaged service and the database is undefined.
            </param>
            <returns>
                This unmanaged service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.UnmanagedBrowsingServiceBuilder.UseJsonDatabase(System.String)">
            <summary>
                Use a JSON Database.
            </summary>
            <param name="databaseFilePath">
                An absolute file path to the database file. If the file does not exist, it will be created.
            </param>
            <remarks>
                Use a <see cref="T:Gee.External.Browsing.Databases.Json.UnmanagedJsonBrowsingDatabase"/> to store threat list updates retrieved from the
                Google Safe Browsing API. The <see cref="T:Gee.External.Browsing.Services.UnmanagedBrowsingService" /> takes ownership of the JSON
                database and will dispose it when the unmanaged service itself is disposed.
            </remarks>
            <returns>
                This unmanaged service builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="databaseFilePath" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.UrlLookupResult">
            <summary>
                URL Lookup Result.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResult._unsafeThreatListDescriptors">
            <summary>
                Unsafe Threat List Descriptors.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResult._unsafeUrlExpression">
            <summary>
                Unsafe URL Expression.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsDatabaseStale">
            <summary>
                Determine if URL Lookup Result Indicates a Stale Database.
            </summary>
            <remarks>
                Determines if the URL lookup result indicates a <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.DatabaseStale" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsMalware">
            <summary>
                Determine if URL is Malware.
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is <see cref="F:Gee.External.Browsing.ThreatType.Malware" /> if, and only if, it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsPotentiallyHarmfulApplication">
            <summary>
                Determine if URL is a Potentially Harmful Application (PHA).
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is a <see cref="F:Gee.External.Browsing.ThreatType.PotentiallyHarmfulApplication" /> if, and
                only if, it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsSafe">
            <summary>
                Determine if URL is Safe.
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsSocialEngineering">
            <summary>
                Determine if URL is Social Engineering.
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is <see cref="F:Gee.External.Browsing.ThreatType.SocialEngineering" /> if, and only if, it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe">
            <summary>
                Determine if URL is Unsafe.
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnwantedSoftware">
            <summary>
                Determine if URL is Unwanted Software.
            </summary>
            <remarks>
                Determines if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is <see cref="F:Gee.External.Browsing.ThreatType.UnwantedSoftware" /> if, and only if, it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.LookupDate">
            <summary>
                Get Lookup Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> was looked up to determine
                whether it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.ResultCode">
            <summary>
                Get Result Code.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Services.UrlLookupResultCode" /> indicating the nature of the URL lookup result.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.TargetPlatforms">
            <summary>
                Get Target Platforms.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is not <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL
                is unsafe, call <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.ThreatTypes">
            <summary>
                Get Threat Types.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is not <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL
                is unsafe, call <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.UnsafeThreatListDescriptors">
            <summary>
                Get Unsafe Threat List Descriptors.
            </summary>
            <remarks>
                Represents the collection of unsafe <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is associated with if, and only if, the URL is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is not <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL
                is unsafe, call <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.UnsafeUrlExpression">
            <summary>
                Get Unsafe URL Expression.
            </summary>
            <remarks>
                Represents the computed unsafe <see cref="T:Gee.External.Browsing.UrlExpression" /> for <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> if, and only if, the
                URL is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL is unsafe, call
                <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" /> is not <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. To determine if the URL
                is unsafe, call <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.IsUnsafe" />.
            </exception>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResult.Url">
            <summary>
                Get URL.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.Build">
            <summary>
                Build a <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" />.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResultBuilder" /> to build a <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" /> with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.DatabaseStale(Gee.External.Browsing.Url,System.DateTime)">
            <summary>
                Create a URL Lookup Result Indicating a Stale Database.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </param>
            <param name="lookupDate">
                The date, in Coordinated Universal Time (UTC), <paramref name="url" /> was looked up to determine
                whether it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. If
                the date is not in UTC, it is converted to it.
            </param>
            <returns>
                A URL lookup result indicating a <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.DatabaseStale" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.Safe(Gee.External.Browsing.Url,System.DateTime)">
            <summary>
                Create a URL Lookup Result Indicating a Safe URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </param>
            <param name="lookupDate">
                The date, in Coordinated Universal Time (UTC), <paramref name="url" /> was looked up to determine
                whether it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. If
                the date is not in UTC, it is converted to it.
            </param>
            <returns>
                A URL lookup result indicating a <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.Unsafe(Gee.External.Browsing.Url,System.DateTime,Gee.External.Browsing.UrlExpression,System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatListDescriptor})">
            <summary>
                Create a URL Lookup Result Indicating an Unsafe URL.
            </summary>
            <param name="url">
                A <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </param>
            <param name="lookupDate">
                The date, in Coordinated Universal Time (UTC), <paramref name="url" /> was looked up to determine
                whether it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />. If
                the date is not in UTC, it is converted to it.
            </param>
            <param name="unsafeUrlExpression">
                The computed unsafe <see cref="T:Gee.External.Browsing.UrlExpression" /> for <paramref name="url" />.
            </param>
            <param name="unsafeThreatListDescriptors">
                A collection of unsafe <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> <paramref name="url" /> is associated with.
            </param>
            <returns>
                A URL lookup result indicating an <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" /> <see cref="P:Gee.External.Browsing.Services.UrlLookupResult.Url" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.#ctor(Gee.External.Browsing.Services.UrlLookupResultBuilder)">
            <summary>
                Create a URL Lookup Result.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResultBuilder" /> to initialize the URL lookup result with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResult.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Services.UrlLookupResultBuilder">
            <summary>
                URL Lookup Result Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.LookupDate">
            <summary>
                Get and Set Lookup Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), <see cref="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.Url" /> was looked up to determine
                whether it is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.ResultCode">
            <summary>
                Get and Set <see cref="T:Gee.External.Browsing.Services.UrlLookupResultCode" />.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Services.UrlLookupResultCode" /> indicating the nature of the URL lookup result.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.UnsafeThreatListDescriptors">
            <summary>
                Get and Set Unsafe Threat List Descriptors.
            </summary>
            <remarks>
                Represents the collection of unsafe <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> <see cref="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.Url" /> is associated with if, and only if, the URL is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.UnsafeUrlExpression">
            <summary>
                Get and Set Unsafe URL Expression.
            </summary>
            <remarks>
                Represents the computed unsafe <see cref="T:Gee.External.Browsing.UrlExpression" /> for <see cref="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.Url" /> if, and only if, the
                URL is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.Services.UrlLookupResultBuilder.Url">
            <summary>
                Get and Set URL.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.Build">
            <summary>
                Build a URL Lookup Result.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.Services.UrlLookupResult" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.SetLookupDate(System.DateTime)">
            <summary>
                Set Lookup Date.
            </summary>
            <param name="value">
                The date, in Coordinated Universal Time (UTC), the URL was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </param>
            <returns>
                This URL lookup result builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.SetResultCode(Gee.External.Browsing.Services.UrlLookupResultCode)">
            <summary>
                Set Result Code.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Services.UrlLookupResultCode" />  indicating the nature of the URL lookup result.
            </param>
            <returns>
                This URL lookup result builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.SetUnsafeThreatListDescriptors(System.Collections.Generic.IEnumerable{Gee.External.Browsing.ThreatListDescriptor})">
            <summary>
                Set Unsafe Threat List Descriptors.
            </summary>
            <param name="value">
                A collection of <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the collection of
                <see cref="T:Gee.External.Browsing.ThreatList" /> the URL is associated with. An empty collection or a null reference indicates
                the URL is <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" />.
            </param>
            <returns>
                This URL lookup result builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.SetUnsafeUrlExpression(Gee.External.Browsing.UrlExpression)">
            <summary>
                Set Unsafe URL Expression.
            </summary>
            <param name="value">
                The computed unsafe <see cref="T:Gee.External.Browsing.UrlExpression" /> for the URL. A null reference indicates the URL is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" />.
            </param>
            <returns>
                This URL lookup result builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.Services.UrlLookupResultBuilder.SetUrl(Gee.External.Browsing.Url)">
            <summary>
                Set URL.
            </summary>
            <param name="value">
                The <see cref="T:Gee.External.Browsing.Url" /> that was looked up to determine whether it is
                <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe" /> or <see cref="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe" />.
            </param>
            <returns>
                This URL lookup result builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.Services.UrlLookupResultCode">
            <summary>
                URL Lookup Result Code.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unknown">
            <summary>
                Indicates an error.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResultCode.DatabaseStale">
            <summary>
                Indicates a determination as to whether a URL is safe or unsafe could not be made because a database
                is expired/out-of-date/stale and needs to be retrieved from the Google Safe Browsing API again.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResultCode.Safe">
            <summary>
                Indicates a URL is safe.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Services.UrlLookupResultCode.Unsafe">
            <summary>
                Indicates a URL is unsafe.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.ThreatEntryType">
            <summary>
                Threat Entry Type.
            </summary>
            <remarks>
                Indicates how a threat is posed. A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> is also used as one of the 
                identifiers identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> together with <see cref="T:Gee.External.Browsing.PlatformType" /> and
                <see cref="T:Gee.External.Browsing.ThreatType" />.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.ThreatEntryType.Unknown">
            <summary>
                Indicates a threat is posed through an unknown type.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatEntryType.Executable">
            <summary>
                Indicates a threat is posed through an executable.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatEntryType.IpAddressRange">
            <summary>
                Indicates a threat is posed through an IP address range.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatEntryType.Url">
            <summary>
                Indicates a threat is posed through a Uniform Resource Locator (URL).
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.ThreatList">
            <summary>
                Threat List.
            </summary>
            <remarks>
                Represents a threat list retrieved from the Google Safe Browsing API. A threat list is identified using a
                <see cref="T:Gee.External.Browsing.ThreatType" />, which indicates the nature of its associated threats, a
                <see cref="T:Gee.External.Browsing.PlatformType" />, which indicates the platform its associated threats target, and a
                <see cref="T:Gee.External.Browsing.ThreatEntryType" />, which indicates how its associated threats is posed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.Descriptor">
            <summary>
                Get Threat List's Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.Expired">
            <summary>
                Determine if Threat List Has Expired.
            </summary>
            <remarks>
                Determines if the threat list has expired and should be retrieved from the Google Safe Browsing API
                again.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.IsMalwareList">
            <summary>
                Determine if Threat List is a Malware List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.Malware" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.IsPotentiallyHarmfulApplicationList">
            <summary>
                Determine if Threat List is a Potentially Harmful Application List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.PotentiallyHarmfulApplication" /> (PHA) list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.IsSocialEngineeringList">
            <summary>
                Determine if Threat List is a Social Engineering List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.SocialEngineering" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.IsUnwantedSoftwareList">
            <summary>
                Determine if Threat List is an Unwanted Software List.
            </summary>
            <remarks>
                Determines if the threat list is an <see cref="F:Gee.External.Browsing.ThreatType.UnwantedSoftware" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.RetrieveDate">
            <summary>
                Get Threat List's Retrieve Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the threat list was retrieved from the
                Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.State">
            <summary>
                Get Threat List's State.
            </summary>
            <remarks>
                Represents the state, formatted as a hexadecimal encoded string, of the threat list when it was
                retrieved from the Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatList.WaitToDate">
            <summary>
                Get Threat List's Wait to Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), a client must wait to before retrieving the
                threat list from the Google Safe Browsing API again. A null reference indicates a client does not need
                to wait before retrieving the threat list from the Google Safe Browsing API again.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.Build">
            <summary>
                Build a Threat List.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.ThreatListBuilder" /> to build a threat list with.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.CreateExpired(Gee.External.Browsing.ThreatListDescriptor,System.String)">
            <summary>
                Create an Expired Threat List.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </param>
            <param name="threatListState">
                The state, formatted as a hexadecimal encoded string, of the threat list when it was retrieved from the
                Google Safe Browsing API.
            </param>
            <returns>
                An expired threat list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference, or if
                <paramref name="threatListState" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="threatListState" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.CreateInvalid(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Create an Invalid Threat List.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </param>
            <returns>
                An invalid threat list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.#ctor(Gee.External.Browsing.ThreatListDescriptor,System.String,System.DateTime)">
            <summary>
                Create a Threat List.
            </summary>
            <param name="descriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </param>
            <param name="state">
                The state, formatted as a hexadecimal encoded string, of the threat list when it was retrieved from the
                Google Safe Browsing API.
            </param>
            <param name="retrieveDate">
                The date, in Coordinated Universal Time (UTC), the threat list was retrieved from the Google Safe
                Browsing API. If the date is not expressed in UTC, it is converted to it.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="descriptor" /> is a null reference, or if <paramref name="state" /> is a
                null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="state" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.#ctor(Gee.External.Browsing.ThreatListDescriptor,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
                Create a Threat List.
            </summary>
            <param name="descriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </param>
            <param name="state">
                The state, formatted as a hexadecimal encoded string, of the threat list when it was retrieved from the
                Google Safe Browsing API.
            </param>
            <param name="retrieveDate">
                The date, in Coordinated Universal Time (UTC), the threat list was retrieved from the Google Safe
                Browsing API. If the date is not expressed in UTC, it is converted to it.
            </param>
            <param name="waitToDate">
                The date, in Coordinated Universal Time (UTC), a client must wait to before retrieving the threat list
                from the Google Safe Browsing API again. If the date is not expressed in UTC, it is converted to it. A
                null reference indicates a client does not need to wait before retrieving the threat list from the
                Google Safe Browsing API again.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="descriptor" /> is a null reference, or if <paramref name="state" /> is a
                null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="state" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.#ctor(Gee.External.Browsing.ThreatListBuilder)">
            <summary>
                Create a Threat List.
            </summary>
            <param name="builder">
                A <see cref="T:Gee.External.Browsing.ThreatListBuilder" /> to initialize the threat list with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="builder" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.Equals(System.Object)">
            <summary>
                Determine if Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.ThreatList.InvalidThreatListCache">
            <summary>
                Invalid Threat List Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatList.InvalidThreatListCache.Cache">
            <summary>
                Cache.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatList.InvalidThreatListCache.InvalidThreatListState">
            <summary>
                Invalid Threat List State.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.InvalidThreatListCache.#cctor">
            <summary>
                Create an Invalid Threat List Cache.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.ThreatList.InvalidThreatListCache.CreateInvalidThreatList(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Create an Invalid Threat List.
            </summary>
            <param name="threatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the threat list.
            </param>
            <returns>
                An invalid threat list.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="threatListDescriptor" /> is a null reference.
            </exception>
        </member>
        <member name="T:Gee.External.Browsing.ThreatListBuilder">
            <summary>
                Threat List Builder.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListBuilder.Descriptor">
            <summary>
                Get and Set Threat List's Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListBuilder.RetrieveDate">
            <summary>
                Get and Set Threat List's Retrieve Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the <see cref="T:Gee.External.Browsing.ThreatList" /> was retrieved
                from the Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListBuilder.State">
            <summary>
                Get and Set Threat List's State.
            </summary>
            <remarks>
                Represents the state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> when
                it was retrieved from the Google Safe Browsing API.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListBuilder.WaitToDate">
            <summary>
                Get and Set Threat List's Wait to Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), a client must wait to before retrieving the
                <see cref="T:Gee.External.Browsing.ThreatList" /> from the Google Safe Browsing API again. A null reference indicates a client
                does not need to wait before retrieving the threat list from the Google Safe Browsing API again.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.#ctor">
            <summary>
                Create a Threat List Builder.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.Build">
            <summary>
                Build a Threat List.
            </summary>
            <returns>
                A <see cref="T:Gee.External.Browsing.ThreatList" />.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.SetDescriptor(Gee.External.Browsing.ThreatListDescriptor)">
            <summary>
                Set Threat List's Descriptor.
            </summary>
            <param name="value">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />.
            </param>
            <returns>
                This threat list builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.SetDescriptor(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Set Threat List's Descriptor.
            </summary>
            <param name="threatType">
                A <see cref="T:Gee.External.Browsing.ThreatType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />.
            </param>
            <param name="platformType">
                A <see cref="T:Gee.External.Browsing.PlatformType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />.
            </param>
            <param name="threatEntryType">
                A <see cref="T:Gee.External.Browsing.ThreatEntryType" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" />.
            </param>
            <returns>
                This threat list builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.SetRetrieveDate(System.DateTime)">
            <summary>
                Set Threat List's Retrieve Date.
            </summary>
            <param name="value">
                The date, in Coordinated Universal Time (UTC), the <see cref="T:Gee.External.Browsing.ThreatList" /> was retrieved from the
                Google Safe Browsing API. If the date is not expressed in UTC, it is converted to it.
            </param>
            <returns>
                This threat list builder.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.SetState(System.String)">
            <summary>
                Set Threat List's State.
            </summary>
            <param name="value">
                The state, formatted as a hexadecimal encoded string, of the <see cref="T:Gee.External.Browsing.ThreatList" /> when it was
                retrieved from the Google Safe Browsing API.
            </param>
            <returns>
                This threat list builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="value" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="value" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListBuilder.SetWaitToDate(System.Nullable{System.DateTime})">
            <summary>
                Set Threat List's Wait to Date.
            </summary>
            <param name="value">
                The date, in Coordinated Universal Time (UTC), a client must wait to before retrieving the
                <see cref="T:Gee.External.Browsing.ThreatList" /> from the Google Safe Browsing API again. If the date is not expressed in
                UTC, it is converted to it. A null reference indicates a client does not need to wait before
                retrieving the threat list from the Google Safe Browsing API again.
            </param>
            <returns>
                This threat list builder.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.ThreatListDescriptor">
            <summary>
                Threat List Descriptor.
            </summary>
            <remarks>
                Identifies a threat list. A threat list is identified using a <see cref="T:Gee.External.Browsing.ThreatType" />, which
                indicates the nature of its associated threats, a <see cref="T:Gee.External.Browsing.PlatformType" />, which indicates
                the platform its associated threats target, and a <see cref="T:Gee.External.Browsing.ThreatEntryType" />, which indicates
                how its associated threats is posed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.IsMalwareList">
            <summary>
                Determine if Threat List is a Malware List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.Malware" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.IsPotentiallyHarmfulApplicationList">
            <summary>
                Determine if Threat List is a Potentially Harmful Application List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.PotentiallyHarmfulApplication" />
                (PHA) list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.IsSocialEngineeringList">
            <summary>
                Determine if Threat List is a Social Engineering List.
            </summary>
            <remarks>
                Determines if the threat list is a <see cref="F:Gee.External.Browsing.ThreatType.SocialEngineering" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.IsUnwantedSoftwareList">
            <summary>
                Determine if Threat List is an Unwanted Software List.
            </summary>
            <remarks>
                Determines if the threat list is an <see cref="F:Gee.External.Browsing.ThreatType.UnwantedSoftware" /> list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.PlatformType">
            <summary>
                Get Threat List's Platform Type.
            </summary>
            <remarks>
                Represents the <see cref="P:Gee.External.Browsing.ThreatListDescriptor.PlatformType" /> identifying the threat list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.ThreatEntryType">
            <summary>
                Get Threat List's Threat Entry Type.
            </summary>
            <remarks>
                Represents the <see cref="P:Gee.External.Browsing.ThreatListDescriptor.ThreatEntryType" /> identifying the threat list.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.ThreatListDescriptor.ThreatType">
            <summary>
                Get Threat List's Threat Type.
            </summary>
            <remarks>
                Represents the <see cref="P:Gee.External.Browsing.ThreatListDescriptor.ThreatType" /> identifying the threat list.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListDescriptor.#ctor(Gee.External.Browsing.ThreatType,Gee.External.Browsing.PlatformType,Gee.External.Browsing.ThreatEntryType)">
            <summary>
                Create a Threat List Descriptor.
            </summary>
            <param name="threatType">
                A <see cref="P:Gee.External.Browsing.ThreatListDescriptor.ThreatType" /> identifying the threat list.
            </param>
            <param name="platformType">
                A <see cref="P:Gee.External.Browsing.ThreatListDescriptor.PlatformType" /> identifying the threat list.
            </param>
            <param name="threatEntryType">
                A <see cref="P:Gee.External.Browsing.ThreatListDescriptor.ThreatEntryType" /> identifying the threat list.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListDescriptor.Equals(System.Object)">
            <summary>
                Determine if Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListDescriptor.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.ThreatListDescriptor.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.ThreatType">
            <summary>
                Threat Type.
            </summary>
            <remarks>
                Indicates the nature of a threat. A <see cref="T:Gee.External.Browsing.ThreatType" /> is also used as one of the 
                identifiers identifying a <see cref="T:Gee.External.Browsing.ThreatList" /> together with <see cref="T:Gee.External.Browsing.PlatformType" /> and
                <see cref="T:Gee.External.Browsing.ThreatEntryType" />.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.ThreatType.Unknown">
            <summary>
                Indicates an unknown threat.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatType.Malware">
            <summary>
                Indicates a threat is malware. Malware is software that is specifically designed to disrupt, damage,
                or gain unauthorized access to a computer system.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatType.PotentiallyHarmfulApplication">
            <summary>
                Indicates a threat is a potentially harmful application (PHA). A PHA is one that could put users, user
                data, or computer systems at risk.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatType.SocialEngineering">
            <summary>
                Indicates a threat is social engineering content. Social engineering content tricks users into doing
                something dangerous, such as revealing confidential information or downloading software.
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.ThreatType.UnwantedSoftware">
            <summary>
                Indicates a threat is unwanted software. Unwanted software is one that is deceptive, trick users into
                installing it or it piggybacks on the installation of another software, does not tell users about all
                of its principal and significant functions, affects a user's system in unexpected ways, is difficult
                to remove, collects or transmits private information without a user's knowledge, or is bundled with
                other software and its presence is not disclosed.
            </summary>
        </member>
        <member name="T:Gee.External.Browsing.UnsafeThreat">
            <summary>
                Unsafe Threat.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.AssociatedThreatListDescriptor">
            <summary>
                Get Threat's Associated Threat List Descriptor.
            </summary>
            <remarks>
                Represents the <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the
                threat is associated with.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.ExpirationDate">
            <summary>
                Get Threat's Expiration Date.
            </summary>
            <remarks>
                Represents the date, in Coordinated Universal Time (UTC), the threat should be considered unsafe to.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.Expired">
            <summary>
                Determine if Threat Has Expired.
            </summary>
            <remarks>
                Determines if the threat has expired and should no longer be considered unsafe. The threat is expired
                if <see cref="P:Gee.External.Browsing.UnsafeThreat.ExpirationDate" /> has elapsed.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.IsMalware">
            <summary>
                Determine if Threat is Malware.
            </summary>
            <remarks>
                Determines if the threat is malware. The threat is malware if
                <see cref="P:Gee.External.Browsing.UnsafeThreat.AssociatedThreatListDescriptor" /> is identified by <see cref="F:Gee.External.Browsing.ThreatType.Malware" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.IsPotentiallyHarmfulApplication">
            <summary>
                Determine if Threat is a Potentially Harmful Application.
            </summary>
            <remarks>
                Determines if the threat is a potentially harmful application (PHA). The threat is a PHA if
                <see cref="P:Gee.External.Browsing.UnsafeThreat.AssociatedThreatListDescriptor" /> is identified by
                <see cref="F:Gee.External.Browsing.ThreatType.PotentiallyHarmfulApplication" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.IsSocialEngineering">
            <summary>
                Determine if Threat is Social Engineering.
            </summary>
            <remarks>
                Determines if the threat is social engineering. The threat is social engineering if
                <see cref="P:Gee.External.Browsing.UnsafeThreat.AssociatedThreatListDescriptor" /> is identified by
                <see cref="F:Gee.External.Browsing.ThreatType.SocialEngineering" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.IsUnwantedSoftware">
            <summary>
                Determine if Threat is Unwanted Software.
            </summary>
            <remarks>
                Determines if the threat is unwanted software. The threat is unwanted software if
                <see cref="P:Gee.External.Browsing.UnsafeThreat.AssociatedThreatListDescriptor" /> is identified by
                <see cref="F:Gee.External.Browsing.ThreatType.UnwantedSoftware" />.
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.Metadata">
            <summary>
                Get Threat's Metadata.
            </summary>
            <remarks>
                Represents the threat's metadata. 
            </remarks>
        </member>
        <member name="P:Gee.External.Browsing.UnsafeThreat.Sha256Hash">
            <summary>
                Get Threat's SHA256 Hash.
            </summary>
            <remarks>
                Represents the full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat.
            </remarks>
        </member>
        <member name="M:Gee.External.Browsing.UnsafeThreat.#ctor(System.String,Gee.External.Browsing.ThreatListDescriptor,System.DateTime)">
            <summary>
                Create an Unsafe Threat.
            </summary>
            <param name="sha256Hash">
                A full SHA256 hash, formatted as a hexadecimal encoded string, identifying the threat.
            </param>
            <param name="associatedThreatListDescriptor">
                A <see cref="T:Gee.External.Browsing.ThreatListDescriptor" /> identifying the <see cref="T:Gee.External.Browsing.ThreatList" /> the threat is
                associated with.
            </param>
            <param name="expirationDate">
                The date, in Coordinated Universal Time (UTC), the threat should be considered unsafe to. If the date
                is not in UTC, it is converted to it.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sha256Hash" /> is a null reference, or if
                <paramref name="associatedThreatListDescriptor" /> is a null reference.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown if <paramref name="sha256Hash" /> is not hexadecimal encoded.
            </exception>
        </member>
        <member name="M:Gee.External.Browsing.UnsafeThreat.Equals(System.Object)">
            <summary>
                Determine if Object is Equal to Another Object.
            </summary>
            <param name="object">
                An object to compare to.
            </param>
            <returns>
                A boolean true if the object is equal to <paramref name="object" />. A boolean false otherwise.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.UnsafeThreat.GetHashCode">
            <summary>
                Get Object's Hash Code.
            </summary>
            <returns>
                The object's hash code.
            </returns>
        </member>
        <member name="M:Gee.External.Browsing.UnsafeThreat.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.Url">
            <summary>
                Canonicalized Uniform Resource Locator (URL).
            </summary>
        </member>
        <member name="F:Gee.External.Browsing.Url.ConsecutiveDotPattern">
            <summary>
                Consecutive Dot (".") Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find consecutive dot (".") characters. The regular
                expression pattern is used on a URI host component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.ConsecutiveSlashPattern">
            <summary>
                Consecutive Slash ("/") Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find consecutive slash ("/") characters. The regular
                expression pattern is used on a URI path component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.ControlCharactersPattern">
            <summary>
                Control Characters Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find CR, LF, and TAB ASCII control characters. The regular
                expression pattern is used on every URI component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.CurrentDirectoryPattern">
            <summary>
                Current Directory Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find a current directory path segment ("/./"). The regular
                expression pattern is used on a URI path component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.EncodedCharacterPattern">
            <summary>
                Encoded Character Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find encoded characters. The regular expression pattern
                supports finding 1 byte, 2 byte, 3 byte, or 4 byte encoded characters. The regular expression pattern
                is used on every URI component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.LeadingDotPattern">
            <summary>
                Leading Dot (".") Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find leading dot (".") characters. The regular expression
                pattern is used on a URI host component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.ParentDirectoryPattern">
            <summary>
                Parent Directory Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find a parent directory path segment ("/../"). The regular
                expression pattern is used on URI path component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.TrailingDotPattern">
            <summary>
                Trailing Dot (".") Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to find trailing dot (".") characters. The regular expression
                pattern is used on a URI host component.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url.UriPattern">
            <summary>
                URI Pattern.
            </summary>
            <remarks>
                Represents a regular expression pattern to match a URI formatted in accordance with RFC 3986.
            </remarks>
        </member>
        <member name="F:Gee.External.Browsing.Url._canonicalizedUrl">
            <summary>
                Canonicalized URL.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Expressions">
            <summary>
                Get URL Expressions.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Host">
            <summary>
                Get URL Host Component.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Path">
            <summary>
                Get URL Path Component.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Query">
            <summary>
                Get URL Query Component.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Scheme">
            <summary>
                Get URL Scheme Component.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.Url.Value">
            <summary>
                Get URL Value.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.Url.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
        <member name="T:Gee.External.Browsing.UrlExpression">
            <summary>
                Canonicalized Uniform Resource Locator (URL) Expression.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.UrlExpression.Sha256Hash">
            <summary>
                Get URL Expression's SHA256 Hash.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.UrlExpression.Sha256HashPrefixes">
            <summary>
                Get URL Expression's SHA256 Hash Prefixes.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.UrlExpression.Url">
            <summary>
                Get URL Expression's URL.
            </summary>
        </member>
        <member name="P:Gee.External.Browsing.UrlExpression.Value">
            <summary>
                Get URL Expression's Value.
            </summary>
        </member>
        <member name="M:Gee.External.Browsing.UrlExpression.#ctor(System.String,Gee.External.Browsing.Url)">
            <summary>
                Create a URL Expression.
            </summary>
            <param name="value">
                The URL Expression's value.
            </param>
            <param name="url">
                The URL Expressions' URL.
            </param>
        </member>
        <member name="M:Gee.External.Browsing.UrlExpression.ToString">
            <summary>
                Get Object's String Representation.
            </summary>
            <returns>
                The object's string representation.
            </returns>
        </member>
    </members>
</doc>
